<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Butterfly帖子的cover图片显示不全解决办法</title>
      <link href="posts/49513.html"/>
      <url>posts/49513.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="症状"><a href="#症状" class="headerlink" title="症状"></a>症状</h2><p>这几天把我WordPress的文章搬过来,结果在WP上Cover是正常的,在Butterfly上却显示不全，如图<br><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://hurrisonx.gitee.io/pic/2021-2/2.png" alt="图片无法显示" title="在WP上"></p><p><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://hurrisonx.gitee.io/pic/2021-2/3.png" alt="图片无法显示" title="在Butterfly上"></p><h2 id="尝试处理"><a href="#尝试处理" class="headerlink" title="尝试处理"></a>尝试处理</h2><p>经Butterfly QQ群大佬提醒,发现如下CSS</p><figure class="highlight css"><figcaption><span>首页Cover</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#recent-posts</span> &gt; <span class="selector-class">.recent-post-item</span> <span class="selector-class">.post_cover</span> <span class="selector-tag">img</span><span class="selector-class">.post_bg</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    -webkit-<span class="attribute">transition</span>: all <span class="number">0.6s</span>;</span><br><span class="line">    -moz-<span class="attribute">transition</span>: all <span class="number">0.6s</span>;</span><br><span class="line">    -o-<span class="attribute">transition</span>: all <span class="number">0.6s</span>;</span><br><span class="line">    -ms-<span class="attribute">transition</span>: all <span class="number">0.6s</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">0.6s</span>;</span><br><span class="line">    <span class="attribute">object-fit</span>: cover;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><figcaption><span>分类,标签等的Cover</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.article-sort-item-img</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    -webkit-<span class="attribute">transition</span>: all <span class="number">0.6s</span>;</span><br><span class="line">    -moz-<span class="attribute">transition</span>: all <span class="number">0.6s</span>;</span><br><span class="line">    -o-<span class="attribute">transition</span>: all <span class="number">0.6s</span>;</span><br><span class="line">    -ms-<span class="attribute">transition</span>: all <span class="number">0.6s</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">0.6s</span>;</span><br><span class="line">    <span class="attribute">object-fit</span>: cover;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><figcaption><span>最新文章Cover</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#aside-content</span> <span class="selector-class">.aside-list</span>&gt;<span class="selector-class">.aside-list-item</span> <span class="selector-class">.thumbnail</span>&gt;<span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    -webkit-<span class="attribute">transition</span>: all .<span class="number">6s</span>;</span><br><span class="line">    -moz-<span class="attribute">transition</span>: all .<span class="number">6s</span>;</span><br><span class="line">    -o-<span class="attribute">transition</span>: all .<span class="number">6s</span>;</span><br><span class="line">    -ms-<span class="attribute">transition</span>: all .<span class="number">6s</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all .<span class="number">6s</span>;</span><br><span class="line">    <span class="attribute">object-fit</span>: cover;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到<code>object-fit: cover</code> 查询DOC,如下:</p><blockquote><p>object-fit 属性指定元素的内容应该如何去适应指定容器的高度与宽度。object-fit 一般用于 img 和 video 标签，一般可以对这些元素进行保留原始比例的剪切、缩放或者直接进行拉伸等。您可以通过使用 object-position 属性来切换被替换元素的内容对象在元素框内的对齐方式。</p></blockquote><p>有如下设置:</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>fill</td><td>默认，不保证保持原有的比例，内容拉伸填充整个内容容器。</td></tr><tr><td>contain</td><td>保持原有尺寸比例。内容被缩放。</td></tr><tr><td>cover</td><td>保持原有尺寸比例。但部分内容可能被剪切。</td></tr><tr><td>none</td><td>保留原有元素内容的长度和宽度，也就是说内容不会被重置。</td></tr><tr><td>scale-down</td><td>保持原有尺寸比例。内容的尺寸与 none 或 contain 中的一个相同，取决于它们两个之间谁得到的对象尺寸会更小一些。</td></tr><tr><td>initial</td><td>设置为默认值。</td></tr><tr><td>inherit</td><td>从该元素的父元素继承属性。</td></tr></tbody></table><p>显然在这里用<code>cover</code>是导致图片显示不全的原因,下面我们开始修复</p><h2 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h2><p>使用CSS，在Inject引入<br>CSS 代码如下:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#recent-posts</span> &gt; <span class="selector-class">.recent-post-item</span> <span class="selector-class">.post_cover</span> <span class="selector-tag">img</span><span class="selector-class">.post_bg</span>,<span class="selector-class">.article-sort-item-img</span> <span class="selector-tag">img</span>,<span class="selector-id">#aside-content</span> <span class="selector-class">.aside-list</span>&gt;<span class="selector-class">.aside-list-item</span> <span class="selector-class">.thumbnail</span>&gt;<span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">object-fit</span>: fill<span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Butterfly </tag>
            
            <tag> 图片 </tag>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用宝塔面板配置webhook</title>
      <link href="posts/32918.html"/>
      <url>posts/32918.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>#使用宝塔面板配置webhook</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近开发用的测试服务器搭建了宝塔面板，在团队开发的时候为了方便，使用webhook不用上服务器自己手动拉代码，现在就说说宝塔webhook的配置 </p><span id="more"></span><h2 id="1-先来说说git仓库"><a href="#1-先来说说git仓库" class="headerlink" title="1.先来说说git仓库"></a>1.先来说说git仓库</h2><p>git仓库有很多代码托管平台，Github、Gitee、Gitlab,Codeup等等，本文使用Gitee配置webhook，其他git仓库大致相同效仿就行。</p><p><strong>使用git clone代码有两种方式：</strong></p><p>第一种：https方式，例如：</p><p>第二种：ssh密钥方式，例如：<a href="mailto:&#x67;&#x69;&#x74;&#x40;&#x67;&#105;&#116;&#x65;&#101;&#46;&#99;&#111;&#x6d;">&#x67;&#x69;&#x74;&#x40;&#x67;&#105;&#116;&#x65;&#101;&#46;&#99;&#111;&#x6d;</a>:xxxx/xxxxx.git</p><p>这两种方式拉代码是有区别的，例：</p><p><strong>https方式拉代码：</strong></p><p>使用git命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;gitee.com&#x2F;xxxx&#x2F;xxxxx.git</span><br></pre></td></tr></table></figure><p>此方式在未配置保存git账号密码的机器上clone代码时需要输入账号密码，每次拉代码都需要输入账号密码比较麻烦，可以使用以下命令保存输入后的密码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config credential.helper store</span><br></pre></td></tr></table></figure><p>此方式是将密码和仓库链接保存在硬盘中</p><p><strong>ssh方式拉代码：</strong></p><p>此方式需要在git服务器上创建公钥，创建公钥命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;your@email.com&quot;</span><br></pre></td></tr></table></figure><p>按照提示完成三次回车，即可生成 ssh key</p><p>此命令可以在服务器上创建一个公钥可以通过下列命令查看创建的公钥：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~&#x2F;.ssh&#x2F;id_rsa.pub</span><br></pre></td></tr></table></figure><p>但是问题来了，一个服务器里面只能创建一个公钥吗？那样一个服务器部署多个项目不可能只用一个公钥吧，我们可以使用以下命令来创建多个公钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;your@email.com&quot; -f ~&#x2F;.ssh&#x2F;id_rsa_new</span><br></pre></td></tr></table></figure><p>其中，-f 参数表示生成公钥／私钥的路径，不设置，代表默认路径。这样我们就可以在同一个服务器中创建多个公钥了，查看公钥命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~&#x2F;.ssh&#x2F;id_rsa_new.pub</span><br></pre></td></tr></table></figure><p>接下来我们将获取的公钥复制到gitee创建的仓库中，例：</p><img alt="添加公钥" class="has" src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://hurrisonx.gitee.io/pic/2021-2/20210225007.png"><p>这样我们就能使用git命令轻松的拉代码了，免去了使用账号密码的麻烦了</p><p>备注：新手在使用git时候要在本地服务器配置一下git全局的用户名与邮箱，命令如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Git全局配置和单个仓库的用户名邮箱配置</span><br><span class="line">git config --global user.name  &quot;username&quot;</span><br><span class="line">git config --global user.email  &quot;your@email.com&quot;</span><br></pre></td></tr></table></figure><h2 id="2-接下来我们来配置宝塔的webhook"><a href="#2-接下来我们来配置宝塔的webhook" class="headerlink" title="2.接下来我们来配置宝塔的webhook"></a>2.接下来我们来配置宝塔的webhook</h2><p>1.首先，进入宝塔面板的软件管理，找到宝塔webhook添加一个新的webhook(注意执行脚本在新添加的时候不用写，可以等待创建成功后再编写)</p><img alt="添加webhoook" class="has" src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://hurrisonx.gitee.io/pic/2021-2/20210225008.png"><p>2.选择你新添加的webhook，点击进入编辑添加shell命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">echo &quot;&quot;</span><br><span class="line">#输出当前时间</span><br><span class="line">date --date&#x3D;&#39;0 days ago&#39; &quot;+%Y-%m-%d %H:%M:%S&quot;</span><br><span class="line">echo &quot;Start&quot;</span><br><span class="line">#判断宝塔WebHook参数是否存在</span><br><span class="line">if [ ! -n &quot;$1&quot; ];</span><br><span class="line">then </span><br><span class="line">          echo &quot;param参数错误&quot;</span><br><span class="line">          echo &quot;End&quot;</span><br><span class="line">          exit</span><br><span class="line">fi</span><br><span class="line">#git项目路径（$1是param后面的参数，指向你的服务器的目录）</span><br><span class="line">gitPath&#x3D;&quot;&#x2F;www&#x2F;wwwroot&#x2F;$1&quot;</span><br><span class="line">#git 网址 (替换成你的git地址，可选择https方式或者ssh方式)</span><br><span class="line">gitHttp&#x3D;&quot;https:&#x2F;&#x2F;gitee.com&#x2F;xxx&#x2F;xxx.git&quot;</span><br><span class="line"> </span><br><span class="line">echo &quot;Web站点路径：$gitPath&quot;</span><br><span class="line"> </span><br><span class="line">#判断项目路径是否存在</span><br><span class="line">if [ -d &quot;$gitPath&quot; ]; then</span><br><span class="line">        cd $gitPath</span><br><span class="line">        #判断是否存在git目录</span><br><span class="line">        if [ ! -d &quot;.git&quot; ]; then</span><br><span class="line">                echo &quot;在该目录下克隆 git&quot;</span><br><span class="line">                git clone $gitHttp gittemp</span><br><span class="line">                mv gittemp&#x2F;.git .</span><br><span class="line">                rm -rf gittemp</span><br><span class="line">        fi</span><br><span class="line">        #拉取最新的项目文件</span><br><span class="line">        #git reset --hard origin&#x2F;master</span><br><span class="line">        git pull</span><br><span class="line">        #设置目录权限</span><br><span class="line">        chown -R www:www $gitPath</span><br><span class="line">        echo &quot;End&quot;</span><br><span class="line">        exit</span><br><span class="line">else</span><br><span class="line">        echo &quot;该项目路径不存在&quot;</span><br><span class="line">        echo &quot;End&quot;</span><br><span class="line">        exit</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>3.接下来选择你创建的webhook，然后点击查看密钥 ，注意宝塔的webhook链接是: http://面板地址:面板端口?access_key=密钥&amp;param=你的代码目录地址</p><img alt="" class="has" src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://hurrisonx.gitee.io/pic/2021-2/20210225009.png"><p>4.进入gitee仓库选择管理的webhooks添加新的webhook （密码可以不填）</p><img alt="" class="has" src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://hurrisonx.gitee.io/pic/2021-2/20210225010.png"><p>5.添加成功后点击测试查看请求结果</p><img alt="" class="has" src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://hurrisonx.gitee.io/pic/2021-2/20210225011.png"><img alt="" class="has" src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://hurrisonx.gitee.io/pic/2021-2/20210225012.png"><p>这样我们配置webhook就大功告成了</p><p>注意：</p><p>1.如果碰到项目比较大或者其他未知的情况，可以先在指定的目录中先把代码拉一下</p><p>2.git私有项目必须配置公钥</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 宝塔 </tag>
            
            <tag> webhook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器硬性刷新</title>
      <link href="posts/41879.html"/>
      <url>posts/41879.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有时，网站的行为可能不符合预期，或者似乎停留在显示过时的信息。 要解决此问题，很容易通过简单的键盘快捷键强制浏览器完全重新加载其页面的本地副本(缓存)。 以下是介绍和操作方法。</p><span id="more"></span><h2 id="什么是浏览器缓存？"><a href="#什么是浏览器缓存？" class="headerlink" title="什么是浏览器缓存？"></a>什么是浏览器缓存？</h2><p>为了加快浏览速度，Web浏览器将网站数据的副本作为一组称为缓存的文件保存到您的计算机上。 加载网站时，通常会查看从缓存中提取的网站元素的本地副本(例如图像)。通常，如果浏览器加载了网站并检测到更改，它将从远程Web服务器获取该网站的新版本并替换缓存。 但是此过程并不完美，有时您的浏览器可能最终会在浏览器缓存中获得网站数据的本地副本，而该副本与服务器上的最新版本不匹配。 因此，网页可能看起来不正确或无法正常运行。要解决此问题，我们需要强制Web浏览器放弃其在缓存中已经拥有的内容，并下载该网站的最新版本。 许多人将此称为“硬刷新”。</p><h2 id="如何在浏览器中执行硬刷新"><a href="#如何在浏览器中执行硬刷新" class="headerlink" title="如何在浏览器中执行硬刷新"></a>如何在浏览器中执行硬刷新</h2><p>在PC和Mac上的大多数浏览器中，您可以执行简单的操作来强制进行硬刷新。 按住键盘上的Shift键，然后单击浏览器工具栏上的重新加载图标。<br><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://hurrisonx.gitee.io/pic/2021-2/20210225006.png"></p><p>也有键盘快捷键可以执行等效的硬刷新。 由于有多种方法可以执行相同的操作，因此将在下面列出：</p><ul><li>适用于Windows的Chrome，Firefox或Edge：按Ctrl + F5(如果不起作用，请尝试按Shift + F5或Ctrl + Shift + R)。</li><li>适用于Mac的Chrome或Firefox：按Shift + Command + R。</li><li>Mac版Safari：没有简单的键盘快捷键可以强制进行硬刷新。 而是按Command + Option + E清空缓存，然后按住Shift并单击工具栏中的“重新加载”。</li><li>适用于iPhone和iPad的Safari：没有用于强制刷新缓存的快捷方式。 您必须深入研究设置才能清除浏览器的缓存。</li></ul><p>执行硬刷新后，您应该会看到网页空白，并且重新加载过程将比平时花费更长的时间。 那是因为浏览器正在重新下载站点上的所有数据和图像。<br>如果强制刷新不能解决问题，则可以尝试再次进行硬刷新。 如果这样没有帮助，则问题可能出在网站本身上，或者您的浏览器可能需要更新 。 祝好运！</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 硬性刷新 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm使用镜像和对包的操作</title>
      <link href="posts/2198.html"/>
      <url>posts/2198.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="方法总结"><a href="#方法总结" class="headerlink" title="方法总结"></a>方法总结</h1><h2 id="1、命令行临时使用指定镜像（淘宝）"><a href="#1、命令行临时使用指定镜像（淘宝）" class="headerlink" title="1、命令行临时使用指定镜像（淘宝）"></a>1、命令行临时使用指定镜像（淘宝）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm --registry https:&#x2F;&#x2F;registry.npm.taobao.org install express</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="2、命令行永久更改使用指定镜像（淘宝）"><a href="#2、命令行永久更改使用指定镜像（淘宝）" class="headerlink" title="2、命令行永久更改使用指定镜像（淘宝）"></a>2、命令行永久更改使用指定镜像（淘宝）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>以后 npm install express 默认使用指定（淘宝）镜像</p><p> </p><h2 id="3、通过npm配置文件直接修改"><a href="#3、通过npm配置文件直接修改" class="headerlink" title="3、通过npm配置文件直接修改"></a>3、通过npm配置文件直接修改</h2><p>本质和第2条一样，配置文件位置（windows环境）为C盘下的.npmrc文件（百度很容易查到文件路径），MAC没试过。可以用如下命令找到配置文件位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config ls -l</span><br></pre></td></tr></table></figure><img alt="" class="has" height="194" src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://hurrisonx.gitee.io/pic/2021-2/20210225005.png" width="600"><h2 id="4、使用淘宝-NPM-镜像"><a href="#4、使用淘宝-NPM-镜像" class="headerlink" title="4、使用淘宝 NPM 镜像"></a>4、使用淘宝 NPM 镜像</h2><p>（参考 <a href="http://www.runoob.com/nodejs/nodejs-npm.html">传送门</a>）</p><p>命令行输入 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>这样就可以使用 cnpm 命令来安装模块了： cnpm install express</p><p>查看目前使用的npm镜像的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></figure><h2 id="5、设置单独某个包的下载地址"><a href="#5、设置单独某个包的下载地址" class="headerlink" title="5、设置单独某个包的下载地址"></a>5、设置单独某个包的下载地址</h2><p>以包electron，其镜像为例</p><p>打开.npmrc，添加该包的指定镜像，截图如下</p><p>               <img alt="" class="has" height="82" src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://hurrisonx.gitee.io/pic/2021-2/20210225004.png" width="654"></p><h2 id="6、将镜像源改回国外的源的方法"><a href="#6、将镜像源改回国外的源的方法" class="headerlink" title="6、将镜像源改回国外的源的方法"></a>6、将镜像源改回国外的源的方法</h2><p>要想将镜像源改回国外的源可以直接将.npmrc文件直接删除，想恢复时直接从回收站还原即可。</p><h2 id="7、查看npm源上包的所有版本"><a href="#7、查看npm源上包的所有版本" class="headerlink" title="7、查看npm源上包的所有版本"></a>7、查看npm源上包的所有版本</h2><p>以 <strong>**babel-core **</strong>为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm view babel-core versions</span><br></pre></td></tr></table></figure><h2 id="8、安装包的最新版本，包含beta版"><a href="#8、安装包的最新版本，包含beta版" class="headerlink" title="8、安装包的最新版本，包含beta版"></a>8、安装包的最新版本，包含beta版</h2><p>以 <strong>**babel-core **</strong>为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-core@next</span><br></pre></td></tr></table></figure><h2 id="9、查看package-lock-json中具体依赖树"><a href="#9、查看package-lock-json中具体依赖树" class="headerlink" title="9、查看package-lock.json中具体依赖树"></a>9、查看package-lock.json中具体依赖树</h2><p>以开源库tar为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm ls tar</span><br></pre></td></tr></table></figure><img alt="" class="has" height="180" src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://hurrisonx.gitee.io/pic/2021-2/20210225003.png" width="411"><p> </p><h2 id="10、npm的缓存及全局包位置（默认情况）"><a href="#10、npm的缓存及全局包位置（默认情况）" class="headerlink" title="10、npm的缓存及全局包位置（默认情况）"></a>10、npm的缓存及全局包位置（默认情况）</h2><p>可以通过命令行”npm config get cache”获取缓存目录，对于全局路径还可以用这个命令”npm root -g”</p><p>mac下： /Users/apple/.npmrc  (“apple”是自己的mac用户名)</p><p>window下：%APPDATA%/npm/node_modules</p><h2 id="12、npm源管理工具："><a href="#12、npm源管理工具：" class="headerlink" title="12、npm源管理工具："></a>12、npm源管理工具：</h2><p>nrm：npm install -g nrm</p><p> </p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> npm </tag>
            
            <tag> 镜像 </tag>
            
            <tag> package </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown基本语法</title>
      <link href="posts/18133.html"/>
      <url>posts/18133.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Markdown是一种纯文本格式的标记语言。通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p><p>相比WYSIWYG编辑器</p><p><strong>优点：</strong><br>1、因为是纯文本，所以只要支持Markdown的地方都能获得一样的编辑效果，可以让作者摆脱排版的困扰，专心写作。<br>2、操作简单。比如:WYSIWYG编辑时标记个标题，先选中内容，再点击导航栏的标题按钮，选择几级标题。要三个步骤。而Markdown只需要在标题内容前加#即可</p><p><strong>缺点：</strong><br>1、需要记一些语法（当然，是很简单。五分钟学会）。<br>2、有些平台不支持Markdown编辑模式。</p><p>还好，简书是支持Markdown编辑模式的。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">开启方式：设置-&gt;默认编辑器-&gt;Markdown编辑器</span><br></pre></td></tr></table></figure><span id="more"></span><h1 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h1><p>在想要设置为标题的文字前面加#来表示<br>一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。</p><p>注：标准语法一般在#后跟个空格再写文字，貌似简书不加空格也行。</p><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是一级标题</span></span><br><span class="line"><span class="comment">## 这是二级标题</span></span><br><span class="line"><span class="comment">### 这是三级标题</span></span><br><span class="line"><span class="comment">#### 这是四级标题</span></span><br><span class="line"><span class="comment">##### 这是五级标题</span></span><br><span class="line"><span class="comment">###### 这是六级标题</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><h1 id="二、字体"><a href="#二、字体" class="headerlink" title="二、字体"></a>二、字体</h1><ul><li><h5 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h5></li></ul><p>要加粗的文字左右分别用两个*号包起来</p><ul><li><h5 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h5></li></ul><p>要倾斜的文字左右分别用一个*号包起来</p><ul><li><h5 id="斜体加粗"><a href="#斜体加粗" class="headerlink" title="斜体加粗"></a>斜体加粗</h5></li></ul><p>要倾斜和加粗的文字左右分别用三个*号包起来</p><ul><li><h5 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h5></li></ul><p>要加删除线的文字左右分别用两个~~号包起来</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">**这是加粗的文字**</span><br><span class="line">*这是倾斜的文字*&#96;</span><br><span class="line">***这是斜体加粗的文字***</span><br><span class="line">~~这是加删除线的文字~~</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em><br><strong><em>这是斜体加粗的文字</em></strong><br><del>这是加删除线的文字</del></p><p>-</p><h1 id="三、引用"><a href="#三、引用" class="headerlink" title="三、引用"></a>三、引用</h1><p>在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;<br>n个…<br>貌似可以一直加下去，但没神马卵用</p><p>示例：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;这是引用的内容</span><br><span class="line">&gt;&gt;这是引用的内容</span><br><span class="line">&gt;&gt;&gt;这是引用的内容</span><br></pre></td></tr></table></figure><p>效果如下：</p><blockquote><p>这是引用的内容</p><blockquote><p>这是引用的内容</p><blockquote><p> 这是引用的内容</p></blockquote></blockquote></blockquote><h1 id="四、分割线"><a href="#四、分割线" class="headerlink" title="四、分割线"></a>四、分割线</h1><p>三个或者三个以上的 - 或者 * 都可以。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">----</span><br><span class="line">***</span><br><span class="line">*****</span><br></pre></td></tr></table></figure><p>效果如下：<br>可以看到，显示效果是一样的。</p><hr><hr><hr><hr><h1 id="五、图片"><a href="#五、图片" class="headerlink" title="五、图片"></a>五、图片</h1><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">![图片alt](图片地址 &#39;&#39;图片title&#39;&#39;)</span><br><span class="line"></span><br><span class="line">图片alt就是显示在图片下面的文字，相当于对图片内容的解释。</span><br><span class="line">图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![blockchain](https:<span class="comment">//hurrisonx.gitee.io/pic/2021-2/20210225001.jpg &quot;区块链&quot;)</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://hurrisonx.gitee.io/pic/2021-2/20210225001.jpg" alt="blockchain" title="区块链"></p><p><strong>上传本地图片直接点击导航栏的图片标志，选择图片即可</strong></p><p>markdown格式追求的是简单、多平台统一。那么图片的存储就是一个问题，需要用图床，提供统一的外链，这样就不用在不同的平台去处理图片的问题了。才能做到书写一次，各处使用。<br>关于图床的选择我写了一篇文章，对网上存在的各种方法做了总结，需要的朋友可以看看。<a href="https://www.jianshu.com/p/ea1eb11db63f">markdown图床</a></p><h1 id="六、超链接"><a href="#六、超链接" class="headerlink" title="六、超链接"></a>六、超链接</h1><p>语法：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">超链接名</span>](超链接地址 <span class="string">&quot;超链接title&quot;</span>)</span><br><span class="line">title可加可不加</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">简书</span>](https:<span class="comment">//jianshu.com)</span></span><br><span class="line">[<span class="meta">百度</span>](https:<span class="comment">//baidu.com)</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><a href="https://www.jianshu.com/u/1f5ac0cf6a8b">简书</a><br><a href="https://links.jianshu.com/go?to=http://baidu.com">百度</a></p><p>注：Markdown本身语法不支持链接在新页面中打开，貌似简书做了处理，是可以的。别的平台可能就不行了，如果想要在新页面中打开的话可以用html语言的a标签代替。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;超链接地址&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>超链接名<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">示例</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.jianshu.com/u/1f5ac0cf6a8b&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>简书<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="七、列表"><a href="#七、列表" class="headerlink" title="七、列表"></a>七、列表</h1><h5 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h5><p>语法：<br>无序列表用 - + * 任何一种都可以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- 列表内容</span><br><span class="line">+ 列表内容</span><br><span class="line">* 列表内容</span><br><span class="line"></span><br><span class="line">注意：- + * 跟内容之间都要有一个空格</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果如下：</p><ul><li>列表内容</li><li>列表内容</li><li>列表内容</li></ul><h5 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h5><p>语法：<br>数字加点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 列表内容</span><br><span class="line">2. 列表内容</span><br><span class="line">3. 列表内容</span><br><span class="line"></span><br><span class="line">注意：序号跟内容之间要有空格</span><br></pre></td></tr></table></figure><p>效果如下：</p><ol><li>列表内容</li><li>列表内容</li><li>列表内容</li></ol><h5 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h5><p><strong>上一级和下一级之间敲三个空格即可</strong></p><ul><li>一级无序列表内容<ul><li>二级无序列表内容</li><li>二级无序列表内容</li><li>二级无序列表内容</li></ul></li><li>一级无序列表内容<ol><li>二级有序列表内容</li><li>二级有序列表内容</li><li>二级有序列表内容</li></ol></li></ul><ol><li>一级有序列表内容<ul><li>二级无序列表内容</li><li>二级无序列表内容</li><li>二级无序列表内容</li></ul></li><li>一级有序列表内容<ol><li>二级有序列表内容</li><li>二级有序列表内容</li><li>二级有序列表内容</li></ol></li></ol><h1 id="八、表格"><a href="#八、表格" class="headerlink" title="八、表格"></a>八、表格</h1><p>语法：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 表头 | 表头 | 表头 |</span><br><span class="line">| --- | --- | --- |</span><br><span class="line">| 内容 | 内容 | 内容 |</span><br><span class="line">| 内容 |内容 | 内容 |</span><br></pre></td></tr></table></figure><p>第二行分割表头和内容。</p><ul><li>有一个就行，为了对齐，多加了几个<br>文字默认居左</li><li>两边加：表示文字居中</li><li>右边加：表示文字居右</li></ul><p>示例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| 姓名 | 技能 | 排行 |</span><br><span class="line">| --- | --- | --- |</span><br><span class="line">| 刘备 | 哭 | 大哥 |</span><br><span class="line">| 关羽 | 打 | 二哥 |</span><br><span class="line">| 张飞 | 骂 | 三弟 |</span><br></pre></td></tr></table></figure><p>效果如下：</p><table><thead><tr><th>姓名</th><th>技能</th><th>排行</th></tr></thead><tbody><tr><td>刘备</td><td>哭</td><td>大哥</td></tr><tr><td>关羽</td><td>打</td><td>二哥</td></tr><tr><td>张飞</td><td>骂</td><td>三弟</td></tr></tbody></table><h1 id="九、代码"><a href="#九、代码" class="headerlink" title="九、代码"></a>九、代码</h1><p>语法：<br>单行代码：代码之间分别用一个反引号包起来</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`代码内容`</span></span><br></pre></td></tr></table></figure><p>代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">``</span><span class="string">`)</span></span><br><span class="line"><span class="string">  代码...</span></span><br><span class="line"><span class="string">  代码...</span></span><br><span class="line"><span class="string">  代码...</span></span><br><span class="line"><span class="string">(`</span><span class="string">``</span>)</span><br></pre></td></tr></table></figure><blockquote><p>注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。</p></blockquote><p>示例：</p><p>单行代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`create database hero;`</span></span><br></pre></td></tr></table></figure><p>代码块</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(```)</span><br><span class="line">    function <span class="function"><span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line">         echo <span class="string">&quot;这是一句非常牛逼的代码&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">fun</span><span class="params">()</span></span>;</span><br><span class="line">(```)</span><br></pre></td></tr></table></figure><p>效果如下：</p><p>单行代码</p><p><code>create database hero;</code></p><p>代码块</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function <span class="function"><span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line">  echo <span class="string">&quot;这是一句非常牛逼的代码&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">fun</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h1 id="十、流程图"><a href="#十、流程图" class="headerlink" title="十、流程图"></a>十、流程图</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#96;&#96;&#96;flow</span><br><span class="line">st&#x3D;&gt;start: 开始</span><br><span class="line">op&#x3D;&gt;operation: My Operation</span><br><span class="line">cond&#x3D;&gt;condition: Yes or No?</span><br><span class="line">e&#x3D;&gt;end</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br><span class="line">&amp;&#96;&#96;&#96;</span><br></pre></td></tr></table></figure><p>效果如下：  </p><p><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://hurrisonx.gitee.io/pic/2021-2/20210225002.webp"></p><p>流程图.png</p><p><a href="https://www.jianshu.com/p/191d1e21f7ed">原文</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
            <tag> 语法 </tag>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo史上最全搭建教程</title>
      <link href="posts/51935.html"/>
      <url>posts/51935.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>现在市面上的博客很多，如CSDN，博客园，简书等平台，可以直接在上面发表，用户交互做的好，写的文章百度也能搜索的到。缺点是比较不自由，会受到平台的各种限制和恶心的广告。</p><p>而自己购买域名和服务器，搭建博客的成本实在是太高了，不光是说这些购买成本，单单是花力气去自己搭这么一个网站，还要定期的维护它，对于我们大多数人来说，实在是没有这样的精力和时间。</p><p>那么就有第三种选择，直接在github page平台上托管我们的博客。这样就可以安心的来写作，又不需要定期维护，而且hexo作为一个快速简洁的博客框架，用它来搭建博客真的非常容易。</p><span id="more"></span><h2 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h2><p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。</p><p>教程分三个部分，</p><ul><li>第一部分：hexo的初级搭建还有部署到github page上，以及个人域名的绑定。- 第二部分：hexo的基本配置，更换主题，实现多终端工作，以及在coding page部署实现国内外分流- 第三部分：hexo添加各种功能，包括搜索的SEO，阅读量统计，访问量统计和评论系统等。<h1 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h1></li></ul><p>hexo的初级搭建还有部署到github page上，以及个人域名的绑定。</p><h1 id="Hexo简介-1"><a href="#Hexo简介-1" class="headerlink" title="Hexo简介"></a>Hexo简介</h1><p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。</p><h1 id="Hexo搭建步骤"><a href="#Hexo搭建步骤" class="headerlink" title="Hexo搭建步骤"></a>Hexo搭建步骤</h1><ol><li>安装Git1. 安装Node.js1. 安装Hexo1. GitHub创建个人仓库1. 生成SSH添加到GitHub1. 将hexo部署到GitHub1. 设置个人域名1. 发布文章<h1 id="1-安装Git"><a href="#1-安装Git" class="headerlink" title="1. 安装Git"></a>1. 安装Git</h1></li></ol><p>Git是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。也就是用来管理你的hexo博客文章，上传到GitHub的工具。Git非常强大，我觉得建议每个人都去了解一下。廖雪峰老师的Git教程写的非常好，大家可以了解一下。</p><p>windows：到git官网上下载,,下载后会有一个Git Bash的命令行工具，以后就用这个工具来使用git。</p><p>linux：对linux来说实在是太简单了，因为最早的git就是在linux上编写的，只需要一行代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><p>安装好后，用<code>git --version</code> 来查看一下版本</p><h1 id="2-安装nodejs"><a href="#2-安装nodejs" class="headerlink" title="2. 安装nodejs"></a>2. 安装nodejs</h1><p>Hexo是基于nodeJS编写的，所以需要安装一下nodeJs和里面的npm工具。</p><p>windows：选择LTS版本就行了。</p><p>linux：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nodejs</span><br><span class="line">sudo apt-get install npm</span><br></pre></td></tr></table></figure><p>安装完后，打开命令行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>检查一下有没有安装成功</p><p>顺便说一下，windows在git安装完后，就可以直接使用git bash来敲命令行了，不用自带的cmd，cmd有点难用。</p><h1 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3. 安装hexo"></a>3. 安装hexo</h1><p>前面git和nodejs安装好后，就可以安装hexo了，你可以先创建一个文件夹blog，然后<code>cd</code>到这个文件夹下（或者在这个文件夹下直接右键git bash打开）。</p><p>输入命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>依旧用<code>hexo -v</code>查看一下版本</p><p>至此就全部安装完了。</p><p>接下来初始化一下hexo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init myblog</span><br></pre></td></tr></table></figure><p>这个myblog可以自己取什么名字都行，然后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd myblog &#x2F;&#x2F;进入这个myblog文件夹</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>新建完成后，指定文件夹目录下有：</p><ul><li>node_modules: 依赖包- public：存放生成的页面- scaffolds：生成文章的一些模板- source：用来存放你的文章- themes：主题- ** _config.yml: 博客的配置文件**<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure></li></ul><p>打开hexo的服务，在浏览器输入localhost:4000就可以看到你生成的博客了。<br>s<br>大概长这样： <img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://ww1.sinaimg.cn/large/d40b6c29gy1fvrksvj6e0j211c0f2n60.jpg" alt="" referrerpolicy="no-referrer"> 使用ctrl+c可以把服务关掉。</p><h1 id="4-GitHub创建个人仓库"><a href="#4-GitHub创建个人仓库" class="headerlink" title="4. GitHub创建个人仓库"></a>4. GitHub创建个人仓库</h1><p>首先，你先要有一个GitHub账户，去注册一个吧。</p><p>注册完登录后，在GitHub.com中看到一个New repository，新建仓库 <img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstcm7ej20ei0c1aah.jpg" referrerpolicy="no-referrer"></p><p>创建一个和你用户名相同的仓库，，只有这样，将来要部署到GitHub page的时候，才会被识别，，其中xxx就是你注册GitHub的用户名。我这里是已经建过了。</p><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstusrdj20iw0o4myp.jpg" referrerpolicy="no-referrer"><p>点击create repository。</p><h1 id="5-生成SSH添加到GitHub"><a href="#5-生成SSH添加到GitHub" class="headerlink" title="5. 生成SSH添加到GitHub"></a>5. 生成SSH添加到GitHub</h1><p>回到你的git bash中，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot;</span><br><span class="line">git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p>这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。这样GitHub才能知道你是不是对应它的账户。</p><p>可以用以下两条，检查一下你有没有输对</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure><p>然后创建SSH,一路回车</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p>这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹。</p><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstd106j20kb073gll.jpg" referrerpolicy="no-referrer"><p>ssh，简单来讲，就是一个秘钥，其中，<code>id_rsa</code>是你这台电脑的私人秘钥，不能给别人看的，<code>id_rsa.pub</code>是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。</p><p>而后在GitHub的setting中，找到SSH keys的设置选项，点击<code>New SSH key</code> 把你的<code>id_rsa.pub</code>里面的信息复制进去。</p><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstdifaj210s0gfjrz.jpg" referrerpolicy="no-referrer"><p>在gitbash中，查看是否成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><h1 id="6-将hexo部署到GitHub"><a href="#6-将hexo部署到GitHub" class="headerlink" title="6. 将hexo部署到GitHub"></a>6. 将hexo部署到GitHub</h1><p>这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开站点配置文件 <code>_config.yml</code>，翻到最后，修改为 YourgithubName就是你的GitHub账户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;YourgithubName&#x2F;YourgithubName.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>其中 <code>hexo clean</code>清除了你之前生成的东西，也可以不加。 <code>hexo generate</code> 顾名思义，生成静态文章，可以用 <code>hexo g</code>缩写 <code>hexo deploy</code> 部署文章，可以用<code>hexo d</code>缩写</p><p>注意deploy时可能要你输入username和password。</p><p>得到下图就说明部署成功了，过一会儿就可以在<code>https://yourname.github.io</code> 这个网站看到你的博客了！！ <img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstbtvfj20lq01u3yd.jpg" referrerpolicy="no-referrer"></p><h1 id="7-设置个人域名"><a href="#7-设置个人域名" class="headerlink" title="7. 设置个人域名"></a>7. 设置个人域名</h1><p>现在你的个人网站的地址是 <code>yourname.github.io</code>，如果觉得这个网址逼格不太够，这就需要你设置个人域名了。但是需要花钱。</p><p>注册一个阿里云账户,在上买一个域名，我买的是 <code>fangzh.top</code>，各个后缀的价格不太一样，比如最广泛的.com就比较贵，看个人喜好咯。</p><p>你需要先去进行实名认证,然后在域名控制台中，看到你购买的域名。</p><p>点<strong>解析</strong>进去，添加解析。</p><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstcu8xj20d607wdfw.jpg" referrerpolicy="no-referrer"><p>其中，192.30.252.153 和 192.30.252.154 是GitHub的服务器地址。 <strong>注意，解析线路选择默认</strong>，不要像我一样选境外。这个境外是后面来做国内外分流用的,在后面的博客中会讲到。记得现在选择<strong>默认</strong>！！</p><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstf8unj20ob05b0sq.jpg" referrerpolicy="no-referrer"><p>登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入你的域名<code>fangzh.top</code></p><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstghklj20as04mt8n.jpg" referrerpolicy="no-referrer"><p>然后在你的博客文件source中创建一个名为CNAME文件，不要后缀。写上你的域名。</p><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstgsyrj208806aq2z.jpg" referrerpolicy="no-referrer"><p>最后，在gitbash中，输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>过不了多久，再打开你的浏览器，输入你自己的域名，就可以看到搭建的网站啦！</p><p>接下来你就可以正式开始写文章了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new newpapername</span><br></pre></td></tr></table></figure><p>然后在source/_post中打开markdown文件，就可以开始编辑了。当你写完的时候，再</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>就可以看到更新了。</p><h1 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h1><p>hexo的基本配置，更换主题，实现多终端工作，以及在coding page部署实现国内外分流。</p><h1 id="1-hexo基本配置"><a href="#1-hexo基本配置" class="headerlink" title="1. hexo基本配置"></a>1. hexo基本配置</h1><p>在文件根目录下的<code>_config.yml</code>，就是整个hexo框架的配置文件了。可以在里面修改大部分的配置。详细可参考描述。</p><h3 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h3><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>title</code></td><td>网站标题</td></tr><tr><td><code>subtitle</code></td><td>网站副标题</td></tr><tr><td><code>description</code></td><td>网站描述</td></tr><tr><td><code>author</code></td><td>您的名字</td></tr><tr><td><code>language</code></td><td>网站使用的语言</td></tr><tr><td><code>timezone</code></td><td>网站时区。Hexo 默认使用您电脑的时区。。比如说：<code>America/New_York</code>, <code>Japan</code>, 和 <code>UTC</code> 。</td></tr></tbody></table><p>其中，<code>description</code>主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。<code>author</code>参数用于主题显示文章的作者。</p><h3 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h3><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>url</code></td><td>网址</td></tr><tr><td><code>root</code></td><td>网站根目录</td></tr><tr><td><code>permalink</code></td><td>文章的永久链接格式</td></tr><tr><td><code>permalink_defaults</code></td><td>永久链接中各部分的默认值</td></tr></tbody></table><p>在这里，你需要把<code>url</code>改成你的网站域名。</p><p>permalink，也就是你生成某个文章时的那个链接格式。</p><p>比如我新建一个文章叫<code>temp.md</code>，那么这个时候他自动生成的地址就是<code>https://yoursite.com/2018/09/05/temp</code>。</p><p>以下是官方给出的示例，关于链接的变量还有很多，需要的可以去官网上查找  。</p><table><thead><tr><th>参数</th><th>结果</th></tr></thead><tbody><tr><td><code>:year/:month/:day/:title/</code></td><td>2013/07/14/hello-world</td></tr><tr><td><code>:year-:month-:day-:title.html</code></td><td>2013-07-14-hello-world.html</td></tr><tr><td><code>:category/:title</code></td><td>foo/bar/hello-world</td></tr></tbody></table><p>再往下翻，中间这些都默认就好了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">theme: landscape</span><br><span class="line"></span><br><span class="line"># Deployment</span><br><span class="line">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: &lt;repository url&gt;</span><br><span class="line">  branch: [branch]</span><br></pre></td></tr></table></figure><p><code>theme</code>就是选择什么主题，也就是在<code>theme</code>这个文件夹下，在官网上有很多个主题，默认给你安装的是<code>lanscape</code>这个主题。当你需要更换主题时，在官网上下载，把主题的文件放在<code>theme</code>文件夹下，再修改这个参数就可以了。</p><p>接下来这个<code>deploy</code>就是网站的部署的，<code>repo</code>就是仓库(<code>Repository</code>)的简写。<code>branch</code>选择仓库的哪个分支。这个在之前进行github page部署的时候已经修改过了，不再赘述。而这个在后面进行双平台部署的时候会再次用到。</p><h3 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h3><p>Front-matter 是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量，举例来说：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: Hello World</span><br><span class="line">date: 2013&#x2F;7&#x2F;13 20:46:25</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>下是预先定义的参数，您可在模板中使用这些参数值并加以利用。</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>layout</code></td><td>布局</td></tr><tr><td><code>title</code></td><td>标题</td></tr><tr><td><code>date</code></td><td>建立日期</td></tr><tr><td><code>updated</code></td><td>更新日期</td></tr><tr><td><code>comments</code></td><td>开启文章的评论功能</td></tr><tr><td><code>tags</code></td><td>标签（不适用于分页）</td></tr><tr><td><code>categories</code></td><td>分类（不适用于分页）</td></tr><tr><td><code>permalink</code></td><td>覆盖文章网址</td></tr></tbody></table><p>其中，分类和标签需要区别一下，分类具有顺序性和层次性，也就是说 <code>Foo, Bar</code> 不等于 <code>Bar, Foo</code>；而标签没有顺序和层次。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line">- Diary</span><br><span class="line">tags:</span><br><span class="line">- PS3</span><br><span class="line">- Games</span><br></pre></td></tr></table></figure><h3 id="layout（布局）"><a href="#layout（布局）" class="headerlink" title="layout（布局）"></a>layout（布局）</h3><p>当你每一次使用代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new paper</span><br></pre></td></tr></table></figure><p>它其实默认使用的是<code>post</code>这个布局，也就是在<code>source</code>文件夹下的<code>_post</code>里面。</p><p>Hexo 有三种默认布局：<code>post</code>、<code>page</code> 和 <code>draft</code>，它们分别对应不同的路径，而您自定义的其他布局和 <code>post</code> 相同，都将储存到 <code>source/_posts</code> 文件夹。</p><table><thead><tr><th>布局</th><th>路径</th></tr></thead><tbody><tr><td><code>post</code></td><td><code>source/_posts</code></td></tr><tr><td><code>page</code></td><td><code>source</code></td></tr><tr><td><code>draft</code></td><td><code>source/_drafts</code></td></tr></tbody></table><p>而new这个命令其实是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>只不过这个layout默认是post罢了。</p><h4 id="page"><a href="#page" class="headerlink" title="page"></a>page</h4><p>如果你想另起一页，那么可以使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page board</span><br></pre></td></tr></table></figure><p>系统会自动给你在source文件夹下创建一个board文件夹，，这样你访问的board对应的链接就是<code>https://xxx.xxx/board</code></p><h4 id="draft"><a href="#draft" class="headerlink" title="draft"></a>draft</h4><p>draft是草稿的意思，也就是你如果想写文章，又不希望被看到，那么可以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new draft newpage</span><br></pre></td></tr></table></figure><p>这样会在source/_draft中新建一个newpage.md文件，如果你的草稿文件写的过程中，想要预览一下，那么可以使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server --draft</span><br></pre></td></tr></table></figure><p>在本地端口中开启服务预览。</p><p>如果你的草稿文件写完了，想要发表到post中，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo publish draft newpage</span><br></pre></td></tr></table></figure><p>就会自动把newpage.md发送到post中。</p><h1 id="2-更换主题"><a href="#2-更换主题" class="headerlink" title="2. 更换主题"></a>2. 更换主题</h1><p>到这一步，如果你觉得默认的<code>landscape</code>主题不好看，那么可以在官网的主题中，选择你喜欢的一个主题进行修改就可以啦。</p><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://ww1.sinaimg.cn/large/d40b6c29gy1fvrkswpjhtj21fu0rhtp6.jpg" referrerpolicy="no-referrer"><p>这里有200多个主题可以选。不过最受欢迎的就是那么几个，比如，非常的简洁好看，大多数人都选择这个，关于这个的教程也比较多。不过我选择的是这个主题，好像是从WordPress移植过来的，展示效果如下：</p><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://ww1.sinaimg.cn/large/d40b6c29gy1fvrksxvknrj21fc0q8tsl.jpg" referrerpolicy="no-referrer"><p>不管怎么样，至少是符合我个人的审美。</p><p>直接在github链接上下载下来，然后放到<code>theme</code>文件夹下就行了，然后再在刚才说的配置文件中把<code>theme</code>换成那个主题文件夹的名字，它就会自动在<code>theme</code>文件夹中搜索你配置的主题。</p><p>而后进入<code>hueman</code>这个文件夹，可以看到里面也有一个配置文件<code>_config.xml</code>，貌似它默认是<code>_config.xml.example</code>，把它复制一份，重命名为<code>_config.xml</code>就可以了。这个配置文件是修改你整个主题的配置文件。</p><h3 id="menu（菜单栏）"><a href="#menu（菜单栏）" class="headerlink" title="menu（菜单栏）"></a>menu（菜单栏）</h3><p>也就是上面菜单栏上的这些东西。</p><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstfwjbj20jd0233ye.jpg" referrerpolicy="no-referrer"><p>其中，About这个你是找不到网页的，因为你的文章中没有about这个东西。如果你想要的话，可以执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page about</span><br></pre></td></tr></table></figure><p>它就会在根目录下<code>source</code>文件夹中新建了一个<code>about</code>文件夹，，在index.md中写上你想要写的东西，就可以在网站上展示出来了。</p><p>如果你想要自己再自定义一个菜单栏的选项，那么就</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page yourdiy</span><br></pre></td></tr></table></figure><p>然后在主题配置文件的menu菜单栏添加一个 <code>Yourdiy : /yourdiy</code>，注意冒号后面要有空格，以及前面的空格要和menu中默认的保持整齐。然后在<code>languages</code>文件夹中，找到<code>zh-CN.yml</code>，在index中添加<code>yourdiy: &#39;中文意思&#39;</code>就可以显示中文了。</p><h3 id="customize-定制"><a href="#customize-定制" class="headerlink" title="customize(定制)"></a>customize(定制)</h3><p>在这里可以修改你的个人logo，默认是那个hueman，在<code>source/css/images</code>文件夹中放入自己要的logo，再改一下<code>url</code>的链接名字就可以了。</p><p><code>favicon</code>是网站中出现的那个小图标的icon，找一张你喜欢的logo，然后转换成ico格式，放在images文件夹下，配置一下路径就行。</p><p><code>social_links</code> ，可以显示你的社交链接，而且是有logo的。</p><p><strong>tips:</strong></p><p>在这里可以添加一个rss功能，也就是那个符号像wifi一样的东西。</p><h3 id="添加RSS"><a href="#添加RSS" class="headerlink" title="添加RSS"></a>添加RSS</h3><p><strong>1. 什么是RSS？</strong></p><p>RSS也就是订阅功能，你可以理解为类似与订阅公众号的功能，来订阅各种博客，杂志等等。</p><p><strong>2. 为什么要用RSS？</strong></p><p>就如同订阅公众号一样，你对某个公众号感兴趣，你总不可能一直时不时搜索这个公众号来看它的文章吧。博客也是一样，如果你喜欢某个博主，或者某个平台的内容，你可以通过RSS订阅它们，然后在RSS阅读器上可以实时推送这些消息。现在网上的垃圾消息太多了，如果你每一天都在看这些消息中度过，漫无目的的浏览，只会让你的时间一点一点的流逝，太不值得了。如果你关注的博主每次都发的消息都是精华，而且不是每一天十几条几十条的轰炸你，那么这个博主就值得你的关注，你就可以通过RSS订阅他。</p><p>在我的理解中，如果你不想每天都被那些没有质量的消息轰炸，只想安安静静的关注几个博主，每天看一些有质量的内容也不用太多，那么RSS订阅值得你的拥有。</p><p><strong>3. 添加RSS功能</strong></p><p>先安装RSS插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-generator-feed</span><br></pre></td></tr></table></figure><p>而后在你整个项目的<code>_config.yml</code>中找到Extensions，添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https:&#x2F;&#x2F;hexo.io&#x2F;plugins&#x2F;</span><br><span class="line">#RSS订阅</span><br><span class="line">plugin:</span><br><span class="line">- hexo-generator-feed</span><br><span class="line">#Feed Atom</span><br><span class="line">feed:</span><br><span class="line">  type: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  limit: 20</span><br></pre></td></tr></table></figure><p>这个时候你的RSS链接就是 域名<code>/atom.xml</code>了。</p><p>所以，在主题配置文件中的这个<code>social links</code>，开启RSS的页面功能，这样你网站上就有那个像wifi一样符号的RSS logo了，注意空格。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rss: &#x2F;atom.xml</span><br></pre></td></tr></table></figure><p><strong>4. 如何关注RSS？</strong></p><p>首先，你需要一个RSS阅读器，在这里我推荐<code>inoreader</code>，宇宙第一RSS阅读器，而且中文支持的挺好。不过它没有PC端的程序，只有网页版，chrome上有插件。在官网上用google账号或者自己注册账号登录，就可以开始你的关注之旅了。</p><p>每次需要关注某个博主时，就点开他的RSS链接，把链接复制到<code>inoreader</code>上，就能关注了，当然，如果是比较大众化的很厉害的博主，你直接搜名字也可以的，比如每个人都非常佩服的阮一峰大师，直接在阅读器上搜索<code>阮一峰</code>，应该就能出来了。</p><p>我关注的比如，阮一峰的网络日志，月光博客，知乎精选等，都很不错。当然，还有我！！赶快关注我吧！你值得拥有：</p><p>在安卓端，inoreader也有下载，不过因为国内google是登录不了的，你需要在inoreader官网上把你的密码修改了，然后就可以用账户名和密码登录了。</p><p>在IOS端，没用过，好像是reader 3可以支持inoreader账户，还有个readon也不错，可以去试试。</p><h3 id="widgets-侧边栏"><a href="#widgets-侧边栏" class="headerlink" title="widgets(侧边栏)"></a>widgets(侧边栏)</h3><p>侧边栏的小标签，如果你想自己增加一个，比如我增加了一个联系方式，那么我把<code>communication</code>写在上面，在<code>zh-CN.yml</code>中的<code>sidebar</code>，添加<code>communication: &#39;中文&#39;</code>。</p><p>然后在<code>hueman/layout/widget</code>中添加一个<code>communicaiton.ejs</code>，填入模板：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (site.posts.length) &#123; %&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;widget-wrap widget-list&quot;&gt;</span><br><span class="line">        &lt;h3 class&#x3D;&quot;widget-title&quot;&gt;&lt;%&#x3D; __(&#39;sidebar.communiation&#39;) %&gt;&lt;&#x2F;h3&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;widget&quot;&gt;</span><br><span class="line">            &lt;!--这里添加你要写的内容--&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><h3 id="search-搜索框"><a href="#search-搜索框" class="headerlink" title="search(搜索框)"></a>search(搜索框)</h3><p>默认搜索框是不能够用的，</p><blockquote><p> you need to install <code>hexo-generator-json-content</code> before using Insight Search </p></blockquote><p>它已经告诉你了，如果想要使用，就安装这个插件。</p><h3 id="comment-评论系统"><a href="#comment-评论系统" class="headerlink" title="comment(评论系统)"></a>comment(评论系统)</h3><p>这里的多数都是国外的，基本用不了。这个<code>valine</code>好像不错，还能统计文章阅读量，可以自己试一试，。</p><h3 id="miscellaneous-其他"><a href="#miscellaneous-其他" class="headerlink" title="miscellaneous(其他)"></a>miscellaneous(其他)</h3><p>这里我就改了一个<code>links</code>，可以添加友链。注意空格要对！不然会报错！</p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>整个主题看起来好像很复杂的样子，但是仔细捋一捋其实也比较流畅，</p><ul><li>languages: 顾名思义- layout：布局文件，其实后期想要修改自定义网站上的东西，添加各种各样的信息，主要是在这里修改，其中<code>comment</code>是评论系统，<code>common</code>是常规的布局，最常修改的在这里面，比如修改页面<code>head</code>和<code>footer</code>的内容。- scripts：js脚本，暂时没什么用- source：里面放了一些css的样式，以及图片<h1 id="3-git分支进行多终端工作"><a href="#3-git分支进行多终端工作" class="headerlink" title="3. git分支进行多终端工作"></a>3. git分支进行多终端工作</h1></li></ul><p>问题来了，如果你现在在自己的笔记本上写的博客，部署在了网站上，那么你在家里用台式机，或者实验室的台式机，发现你电脑里面没有博客的文件，或者要换电脑了，最后不知道怎么移动文件，怎么办？</p><p>在这里我们就可以利用git的分支系统进行多终端工作了，这样每次打开不一样的电脑，只需要进行简单的配置和在github上把文件同步下来，就可以无缝操作了。</p><h3 id="机制"><a href="#机制" class="headerlink" title="机制"></a>机制</h3><p>机制是这样的，由于<code>hexo d</code>上传部署到github的其实是hexo编译后的文件，是用来生成网页的，不包含源文件。</p><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstj43xj20800d7glz.jpg" alt="可以看到，并没有source等源文件在内"><p>也就是上传的是在本地目录里自动生成的<code>.deploy_git</code>里面。</p><p>其他文件 ，包括我们写在source 里面的，和配置文件，主题文件，都没有上传到github</p><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://ww1.sinaimg.cn/large/d40b6c29gy1fvrksthbryj20eb07swej.jpg" referrerpolicy="no-referrer"><p>所以可以利用git的分支管理，将源文件上传到github的另一个分支即可。</p><h3 id="上传分支"><a href="#上传分支" class="headerlink" title="上传分支"></a>上传分支</h3><p>首先，先在github上新建一个hexo分支，如图：</p><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstkyz7j20cp0bgdg5.jpg" referrerpolicy="no-referrer"><p>然后在这个仓库的settings中，选择默认分支为hexo分支（这样每次同步的时候就不用指定分支，比较方便）。</p><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstl8uxj20ql0dsgmo.jpg" referrerpolicy="no-referrer"><p>然后在本地的任意目录下，打开git bash，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:ZJUFangzh&#x2F;ZJUFangzh.github.io.git</span><br></pre></td></tr></table></figure><p>将其克隆到本地，因为默认分支已经设成了hexo，所以clone时只clone了hexo。</p><p>接下来在克隆到本地的<code>ZJUFangzh.github.io</code>中，把除了.git 文件夹外的所有文件都删掉</p><p>把之前我们写的博客源文件全部复制过来，除了<code>.deploy_git</code>。这里应该说一句，复制过来的源文件应该有一个<code>.gitignore</code>，用来忽略一些不需要的文件，如果没有的话，自己新建一个，在里面写上如下，表示这些类型文件不需要git：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules&#x2F;</span><br><span class="line">public&#x2F;</span><br><span class="line">.deploy*&#x2F;</span><br></pre></td></tr></table></figure><p>注意，如果你之前克隆过theme中的主题文件，那么应该把主题文件中的<code>.git</code>文件夹删掉，因为git不能嵌套上传，最好是显示隐藏文件，检查一下有没有，否则上传的时候会出错，导致你的主题文件无法上传，这样你的配置在别的电脑上就用不了了。</p><p>而后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit –m &quot;add branch&quot;</span><br><span class="line">git push </span><br></pre></td></tr></table></figure><p>这样就上传完了，可以去你的github上看一看hexo分支有没有上传上去，其中<code>node_modules</code>、<code>public</code>、<code>db.json</code>已经被忽略掉了，没有关系，不需要上传的，因为在别的电脑上需要重新输入命令安装 。</p><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstk4k1j20yq0h9gmr.jpg" referrerpolicy="no-referrer"><p>这样就上传完了。</p><h3 id="更换电脑操作"><a href="#更换电脑操作" class="headerlink" title="更换电脑操作"></a>更换电脑操作</h3><p>一样的，跟之前的环境搭建一样，</p><ul><li>安装git<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure></li><li>设置git全局邮箱和用户名<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;yourgithubname&quot;</span><br><span class="line">git config --global user.email &quot;yourgithubemail&quot;</span><br></pre></td></tr></table></figure></li><li>设置ssh key<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot;</span><br><span class="line">#生成后填到github和coding上（有coding平台的话）</span><br><span class="line">#验证是否成功</span><br><span class="line">ssh -T git@github.com</span><br><span class="line">ssh -T git@git.coding.net #(有coding平台的话)</span><br></pre></td></tr></table></figure></li><li>安装nodejs<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nodejs</span><br><span class="line">sudo apt-get install npm</span><br></pre></td></tr></table></figure></li><li>安装hexo<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install hexo-cli -g</span><br></pre></td></tr></table></figure></li></ul><p>但是已经不需要初始化了，</p><p>直接在任意文件夹下，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@………………</span><br></pre></td></tr></table></figure><p>然后进入克隆到的文件夹：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd xxx.github.io</span><br><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>生成，部署：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>然后就可以开始写你的新博客了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new newpage</span><br></pre></td></tr></table></figure><p><strong>Tips:</strong></p><ol><li>不要忘了，每次写完最好都把源文件上传一下<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit –m &quot;xxxx&quot;</span><br><span class="line">git push </span><br></pre></td></tr></table></figure></li><li>如果是在已经编辑过的电脑上，已经有clone文件夹了，那么，每次只要和远端同步一下就行了<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure></li></ol><h1 id="4-coding-page上部署实现国内外分流"><a href="#4-coding-page上部署实现国内外分流" class="headerlink" title="4. coding page上部署实现国内外分流"></a>4. coding page上部署实现国内外分流</h1><p>之前我们已经把hexo托管在github了，但是github是国外的，而且百度的爬虫是不能够爬取github的，所以如果你希望你做的博客能够在百度引擎上被收录，而且想要更快的访问，那么可以在国内的coding page做一个托管，这样在国内访问就是coding page，国外就走github page。</p><p><strong>1. 申请coding账户，新建项目</strong></p><p>先申请一个账户，然后创建新的项目，这一步项目名称应该是随意的。</p><p><strong>2. 添加ssh key</strong></p><p>这一步跟github一样。</p><p>添加后，检查一下是不是添加成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@git.coding.net</span><br></pre></td></tr></table></figure><p><strong>3. 修改_config.yml</strong></p><p>hexo官方文档是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  message: [message]</span><br><span class="line">  repo:</span><br><span class="line">    github: &lt;repository url&gt;,[branch]</span><br><span class="line">    coding: &lt;repository url&gt;,[branch] </span><br></pre></td></tr></table></figure><p>那么，我们只需要：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: </span><br><span class="line">    coding: git@git.coding.net:ZJUFangzh&#x2F;ZJUFangzh.git,master</span><br><span class="line">    github: git@github.com:ZJUFangzh&#x2F;ZJUFangzh.github.io.git,master</span><br></pre></td></tr></table></figure><p><strong>4. 部署</strong></p><p>保存一下，直接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>这样就可以在coding的项目上看到你部署的文件了。</p><p><strong>5. 开启coding pages服务，绑定域名</strong></p><p>如图：</p><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstnswnj20xr0bugmj.jpg" referrerpolicy="no-referrer"><p><strong>6. 阿里云添加解析</strong></p><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstjxu6j20o709bdg1.jpg" referrerpolicy="no-referrer"><p>这个时候就可以把之前github的解析改成境外，把coding的解析设为默认了。</p><p><strong>7. 去除coding page的跳转广告</strong></p><p>coding page的一个比较恶心人的地方就是，你只是银牌会员的话，访问会先跳转到一个广告，再到你自己的域名。那么它也给出了消除的办法。右上角切换到coding的旧版界面，默认新版是不行的。然后再来到<code>pages服务</code>这里。</p><p>这里：</p><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstmpshj20j80cbmxq.jpg" referrerpolicy="no-referrer"><p>只要你在页面上添加一行文字，写<code>Hosted by Coding Pages</code>，然后点下面的小勾勾，两个工作日内它就会审核通过了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;Hosted by &lt;a href&#x3D;&quot;https:&#x2F;&#x2F;pages.coding.me&quot; style&#x3D;&quot;font-weight: bold&quot;&gt;Coding Pages&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure><p>我的选择是把这一行代码放在主题文件夹<code>/layout/common/footer.ejs</code>里面，也就是本来在页面中看到的页脚部分。</p><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstk1skj20lh0630su.jpg" referrerpolicy="no-referrer"><p>当然，为了统一，我又在后面加上了and <strong>Github</strong>哈哈，可以不加。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;&lt;span&gt;Hosted by &lt;a href&#x3D;&quot;https:&#x2F;&#x2F;pages.coding.me&quot; style&#x3D;&quot;font-weight: bold&quot;&gt;Coding Pages&lt;&#x2F;a&gt;&lt;&#x2F;span&gt; and &lt;span&gt;&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;github.com&quot; style&#x3D;&quot;font-weight: bold&quot;&gt;Github&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure><p>这是最终加上去的代码。</p><h1 id="第三部分"><a href="#第三部分" class="headerlink" title="第三部分"></a>第三部分</h1><p>hexo添加各种功能，包括搜索的SEO，阅读量统计，访问量统计和评论系统等。</p><p>本文参考了: 这里面说的很详细了。</p><h1 id="1-SEO优化"><a href="#1-SEO优化" class="headerlink" title="1. SEO优化"></a>1. SEO优化</h1><p>推广是很麻烦的事情，怎么样别人才能知道我们呢，首先需要让搜索引擎收录你的这个网站，别人才能搜索的到。那么这就需要SEO优化了。</p><blockquote><p> SEO是由英文Search Engine Optimization缩写而来， 中文意译为“搜索引擎优化”。SEO是指通过站内优化比如网站结构调整、网站内容建设、网站代码优化等以及站外优化。 </p></blockquote><h3 id="百度seo"><a href="#百度seo" class="headerlink" title="百度seo"></a>百度seo</h3><p>刚建站的时候是没有搜索引擎收录我们的网站的。可以在搜索引擎中输入<code>site:&lt;域名&gt;</code></p><p>来查看一下。</p><p><strong>1. 登录百度站长平台添加网站</strong></p><p>登录，在站点管理中添加你自己的网站。</p><p>验证网站有三种方式：文件验证、HTML标签验证、CNAME验证。</p><p>第三种方式最简单，只要将它提供给你的那个xxxxx使用CNAME解析到xxx.baidu.com就可以了。也就是登录你的阿里云，把这个解析填进去就OK了。</p><p><strong>2. 提交链接</strong></p><p>我们需要使用npm自动生成网站的sitemap，然后将生成的sitemap提交到百度和其他搜索引擎</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save     </span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure><p>这时候你需要在你的根目录下<code>_config.xml</code>中看看url有没有改成你自己的：</p><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstpzd9j20ar03b749.jpg" referrerpolicy="no-referrer"><p>重新部署后，就可以在public文件夹下看到生成的sitemap.xml和baidusitemap.xml了。</p><p>然后就可以向百度提交你的站点地图了。</p><p>这里建议使用自动提交。</p><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstwp4pj20fc0kyq4n.jpg" referrerpolicy="no-referrer"><p>自动提交又分为三种：主动推送、自动推送、sitemap。</p><p>可以三个一起提交不要紧，我选择的是后两种。</p><ul><li>自动推送：把百度生成的自动推送代码，放在主题文件<code>/layout/common/head.ejs</code>的适当位置，然后验证一下就可以了。- sitemap：把两个sitemap地址，提交上去，看到状态正常就OK了。<img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://ww1.sinaimg.cn/large/d40b6c29gy1fvrksu9fa6j20v60m4404.jpg" referrerpolicy="no-referrer"></li></ul><p><strong>ps:</strong> 百度收录比较慢，慢慢等个十天半个月再去<code>site:&lt;域名&gt;</code>看看有没有被收录。</p><h3 id="google的SEO"><a href="#google的SEO" class="headerlink" title="google的SEO"></a>google的SEO</h3><p>流程一样，google更简单，而且收录更快，进入，提交网站和sitemap.xml，就可以了。</p><p>如果你这个域名在google这里出了问题，那你就提交 ，这个链接，效果是一样的。</p><p>不出意外的话一天内google就能收录你的网站了。</p><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://ww1.sinaimg.cn/large/d40b6c29gy1fvrkswrucmj20q30lkq72.jpg" referrerpolicy="no-referrer"><p>其他的搜索，如搜狗搜索，360搜索，流程是一样的，这里就不再赘述。</p><h1 id="2-评论系统"><a href="#2-评论系统" class="headerlink" title="2. 评论系统"></a>2. 评论系统</h1><p>评论系统有很多，但是很多都是墙外的用不了，之前说过这个valine好像集成在hueman和next主题里面了，但是我还没有研究过，我看的是这个博主用的来比力评论系统，感觉也还不错。</p><p>，注册好后，点击管理页面，在<code>代码管理</code>中找到安装代码：</p><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://ww1.sinaimg.cn/large/d40b6c29gy1fvrksu93vyj20tk0m440w.jpg" referrerpolicy="no-referrer"><p>获取安装代码后，在主题的comment下新建一个文件放入刚刚那段代码，再找到article文件，找到如下代码，若没有则直接在footer后面添加即可。livebe即为刚刚所创文件名称。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- partial(&#39;comment&#x2F;livebe&#39;) %&gt;</span><br></pre></td></tr></table></figure><p>然后可以自己设置一些东西：</p><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://ww1.sinaimg.cn/large/d40b6c29gy1fvrksufavtj20v70o9mzw.jpg" referrerpolicy="no-referrer"><p>还可以设置评论提醒，这样别人评论你的时候就可以及时知道了。</p><h1 id="3-添加百度统计"><a href="#3-添加百度统计" class="headerlink" title="3. 添加百度统计"></a>3. 添加百度统计</h1><p>百度统计可以在后台上看到你网站的访问数，浏览量，浏览链接分布等很重要的信息。所以添加百度统计能更有效的让你掌握你的网站情况。</p><p>，注册一下，这里的账号好像和百度账号不是一起的。</p><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://ww1.sinaimg.cn/large/d40b6c29gy1fvrksvbdmwj20lf0kx78n.jpg" referrerpolicy="no-referrer"><p>照样把代码复制到<code>head.ejs</code>文件中，然后再进行一下安装检查，半小时左右就可以在百度统计里面看到自己的网站信息了。</p><h1 id="4-文章阅读量统计leanCloud"><a href="#4-文章阅读量统计leanCloud" class="headerlink" title="4. 文章阅读量统计leanCloud"></a>4. 文章阅读量统计leanCloud</h1><p>，进去后注册一下，进入后创建一个应用：</p><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstp8rdj20h30cimxt.jpg" referrerpolicy="no-referrer"><p>在<code>存储</code>中创建Class，命名为Counter,</p><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstygbpj20gq0k0abm.jpg" referrerpolicy="no-referrer"><p>然后在设置页面看到你的<code>应用Key</code>，在主题的配置文件中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">leancloud_visitors:</span><br><span class="line">  enable: true</span><br><span class="line">  app_id: 你的id</span><br><span class="line">  app_key: 你的key</span><br></pre></td></tr></table></figure><p>在<code>article.ejs</code>中适当的位置添加如下，这要看你让文章的阅读量统计显示在哪个地方了，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">阅读数量:&lt;span id&#x3D;&quot;&lt;%&#x3D; url_for(post.path) %&gt;&quot; class&#x3D;&quot;leancloud_visitors&quot; data-flag-title&#x3D;&quot;&lt;%- post.title %&gt;&quot;&gt;&lt;&#x2F;span&gt;次</span><br></pre></td></tr></table></figure><p>然后在<code>footer.ejs</code>的最后，添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;&#x2F;&#x2F;cdn1.lncld.net&#x2F;static&#x2F;js&#x2F;2.5.0&#x2F;av-min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var APP_ID &#x3D; &#39;你的app id&#39;;</span><br><span class="line">    var APP_KEY &#x3D; &#39;你的app key&#39;;</span><br><span class="line">    AV.init(&#123;</span><br><span class="line">        appId: APP_ID,</span><br><span class="line">        appKey: APP_KEY</span><br><span class="line">    &#125;);</span><br><span class="line">    &#x2F;&#x2F; 显示次数</span><br><span class="line">    function showTime(Counter) &#123;</span><br><span class="line">        var query &#x3D; new AV.Query(&quot;Counter&quot;);</span><br><span class="line">        if($(&quot;.leancloud_visitors&quot;).length &gt; 0)&#123;</span><br><span class="line">            var url &#x3D; $(&quot;.leancloud_visitors&quot;).attr(&#39;id&#39;).trim();</span><br><span class="line">            &#x2F;&#x2F; where field</span><br><span class="line">            query.equalTo(&quot;words&quot;, url);</span><br><span class="line">            &#x2F;&#x2F; count</span><br><span class="line">            query.count().then(function (number) &#123;</span><br><span class="line">                &#x2F;&#x2F; There are number instances of MyClass where words equals url.</span><br><span class="line">                $(document.getElementById(url)).text(number?  number : &#39;--&#39;);</span><br><span class="line">            &#125;, function (error) &#123;</span><br><span class="line">                &#x2F;&#x2F; error is an instance of AVError.</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 追加pv</span><br><span class="line">    function addCount(Counter) &#123;</span><br><span class="line">        var url &#x3D; $(&quot;.leancloud_visitors&quot;).length &gt; 0 ? $(&quot;.leancloud_visitors&quot;).attr(&#39;id&#39;).trim() : &#39;icafebolger.com&#39;;</span><br><span class="line">        var Counter &#x3D; AV.Object.extend(&quot;Counter&quot;);</span><br><span class="line">        var query &#x3D; new Counter;</span><br><span class="line">        query.save(&#123;</span><br><span class="line">            words: url</span><br><span class="line">        &#125;).then(function (object) &#123;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    $(function () &#123;</span><br><span class="line">        var Counter &#x3D; AV.Object.extend(&quot;Counter&quot;);</span><br><span class="line">        addCount(Counter);</span><br><span class="line">        showTime(Counter);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>重新部署后就可以了。</p><h1 id="5-引入不蒜子访问量和访问人次统计"><a href="#5-引入不蒜子访问量和访问人次统计" class="headerlink" title="5. 引入不蒜子访问量和访问人次统计"></a>5. 引入不蒜子访问量和访问人次统计</h1><p>不蒜子的添加非常非常方便，</p><p>在<code>footer.ejs</code>中的合适位置，看你要显示在哪个地方，添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--这一段是不蒜子的访问量统计代码--&gt;</span><br><span class="line">&lt;script async src&#x3D;&quot;&#x2F;&#x2F;dn-lbstatics.qbox.me&#x2F;busuanzi&#x2F;2.3&#x2F;busuanzi.pure.mini.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;span id&#x3D;&quot;busuanzi_container_site_pv&quot;&gt;本站总访问量&lt;span id&#x3D;&quot;busuanzi_value_site_pv&quot;&gt;&lt;&#x2F;span&gt;次 &amp;nbsp;   &lt;&#x2F;span&gt;</span><br><span class="line">&lt;span id&#x3D;&quot;busuanzi_container_site_uv&quot;&gt;访客数&lt;span id&#x3D;&quot;busuanzi_value_site_uv&quot;&gt;&lt;&#x2F;span&gt;人次&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure><p>就可以了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>到这里就基本做完了。其实都是参考别的博主的设置的，不一定仅限于hueman主题，其他主题的设置也是大体相同的，所以如果你希望设置别的主题，那么仔细看一下这个主题的代码结构，也能够把上边的功能添加进去。</p><p>多看看别的博主的那些功能，如果有你能找到自己喜欢的功能，那么好好发动搜索技能，很快就能找到怎么做了。加油吧！</p><p><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029">原文</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> hexo </tag>
            
            <tag> 搭建 </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++虚函数表原理浅析</title>
      <link href="posts/23336.html"/>
      <url>posts/23336.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer" /># 前言本文不再阐述虚函数的使用方法，而是从虚函数的实现机制上做一个清晰的剖析<h1 id="C-虚函数表和对象存储"><a href="#C-虚函数表和对象存储" class="headerlink" title="C++虚函数表和对象存储"></a>C++虚函数表和对象存储</h1><p>C++中的虚函数实现了多态的机制，也就是<strong>用父类型指针指向其子类的实例</strong>，然后通过父类的指针调用实际子类的成员函数，这种技术可以让父类的指针有“多种形态”，这也是一种泛型技术，也就是<strong>使用不变的代码来实现可变的算法</strong></p><p>本文不再阐述虚函数的使用方法，而是从虚函数的实现机制上做一个清晰的剖析</p><p>想了解实现机制，就必须先了解对象的存储方式</p><h2 id="对象数据和函数的存储方式"><a href="#对象数据和函数的存储方式" class="headerlink" title="对象数据和函数的存储方式"></a>对象数据和函数的存储方式</h2><p>我们知道，用类去定义对象，系统会为每一个对象分配存储空间</p><p>在你的印象中类的存储可能是下图这样的：</p><p><a href="https://img2018.cnblogs.com/blog/1536438/201909/1536438-20190926205823774-952977711.png"><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://img2018.cnblogs.com/blog/1536438/201909/1536438-20190926205823774-952977711.png"></a></p><p>上图表示要分别为对象的数据和函数的代码分配存储空间，这样肯定是不行的，内存利用率太低了，所以C++编译系统采用的是以下的方法：</p><p><a href="https://img2018.cnblogs.com/blog/1536438/201909/1536438-20190926205843839-1038931091.png"><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://img2018.cnblogs.com/blog/1536438/201909/1536438-20190926205843839-1038931091.png"></a></p><p>每个对象占用存储空间的只是该对象的数据部分（虚函数指针和虚基类指针也属于数据部分），函数代码属于公用部分</p><p>我们常说的“A对象的成员函数”，是从逻辑的角度而言的，而成员函数的物理存储方式其实不是如此</p><h3 id="C-内存分区"><a href="#C-内存分区" class="headerlink" title="C++内存分区"></a>C++内存分区</h3><p>C++的内存分区大概分成五个部分：</p><ol><li>栈（stack）：是由编译器在需要时自动分配，不需要时自动清除的变量存储区，通常存放局部变量、函数参数等。</li><li>堆（heap）：是由<code>malloc</code>等分配的内存块，和堆十分相似，用<code>free</code>来释放</li><li>自由存储区：是由<code>new</code>分配的内存块，由程序员释放（编译器不管），一般一个<code>new</code>与一个<code>delete</code>对应，一个<code>new[]</code>与一个<code>delete[]</code>对应，如果程序员没有释放掉，资源将由操作系统在程序结束后自动回收</li><li>全局/静态存储区：<strong>全局变量</strong>和<strong>静态变量</strong>被分配到同一块内存中</li><li>常量存储区：这是一块特殊存储区，里边存放常量，不允许修改</li></ol><p>（堆和自由存储区其实不过是同一块区域，new底层实现代码中调用了malloc，new可以看成是malloc智能化的高级版本）</p><p>你可能会问：<strong>静态成员函数和非静态成员函数都是在类的定义时放在内存的代码区</strong>的，因而可以说它们都是属于类的，但是类为什么只能直接调用静态类成员函数，而非静态类成员函数(即使函数没有参数)只有类对象才能调用呢</p><p>原因是：类的非静态类成员函数其实都内含了一个指向类对象的指针型参数(即<strong>this指针</strong>)，因此只有类对象才能调用(此时this指针有实值)</p><h2 id="虚函数表"><a href="#虚函数表" class="headerlink" title="虚函数表"></a>虚函数表</h2><p>C++通过继承和虚函数来实现多态性，<strong>虚函数</strong>是通过一张<strong>虚函数表</strong>实现的，虚函数表解决了继承、覆盖、添加虚函数的问题，保证其真实反应实际的函数</p><p>不太熟悉的朋友，以下内容可能看的很懵，个人建议上下来回看</p><h3 id="虚函数表原理简述"><a href="#虚函数表原理简述" class="headerlink" title="虚函数表原理简述"></a>虚函数表原理简述</h3><p>C++实现虚函数的方法是：为每个类对象添加一个隐藏成员，隐藏成员保存了一个指针，这个指针叫<strong>虚表指针</strong>（vptr），它指向一个<strong>虚函数表</strong>（virtual function table, vtbl）</p><p><strong>虚函数表</strong>就像一个数组，表中有许多的<strong>槽（slot）</strong>，每个槽中存放的是一个虚函数的地址（可以理解为数组里存放着指向每个虚函数的指针）</p><p>即：<strong>每个类使用一个虚函数表，每个类对象用一个虚表指针</strong></p><p>在有虚函数的类的实例对象中，这个表被分配在了这个实例对象的内存中（就和上面说的一样），当我们用父类的指针来操作一个子类的时候，这张表就像一个地图一样，指明了实际所应该调用的函数</p><p>大概结构如下：</p><p><a href="https://img2018.cnblogs.com/blog/1536438/201909/1536438-20190926190448985-466463034.png"><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://img2018.cnblogs.com/blog/1536438/201909/1536438-20190926190448985-466463034.png"></a></p><p>在上面这个图中，虚函数表的最后多加了一个结点，这是虚函数表的结束结点，就像字符串的结束符<code>/0</code>一样，其标志了虚函数表的结束，这个结束标志的值在不同的编译器下可能是不同的</p><p>举个例子：<br>基类对象包含一个虚表指针，指向基类的虚函数表<br>派生类对象也将包含一个虚表指针，指向派生类虚函数表</p><ul><li>如果派生类重写了基类的虚方法，该派生类虚函数表将保存重写的虚函数的地址，而不是基类的虚函数地址</li><li>如果基类中的虚方法没有在派生类中重写，那么派生类将继承基类中的虚方法，而且派生类中虚函数表将保存基类中未被重写的虚函数的地址，但如果派生类中定义了新的虚方法，则该虚函数的地址也将被添加到派生类虚函数表中</li></ul><p>你可能已经晕了，没有关系，接下来我们用实例代码演示一下</p><h3 id="找到虚函数表"><a href="#找到虚函数表" class="headerlink" title="找到虚函数表"></a>找到虚函数表</h3><p>C++的编译器会保证<strong>虚函数表的指针存在于对象实例中最前面的位置</strong>（为了保证取虚函数表有最高的性能，在有多层继承或是多重继承的情况下），这意味着我们通过对象实例的地址得到这张虚函数表的地址，然后就可以遍历其中函数指针，并调用相应的函数</p><p>我们建立一个新类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Base </span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">virtual void f() &#123; cout &lt;&lt; &quot;Base::f&quot; &lt;&lt; endl; &#125;</span><br><span class="line">virtual void g() &#123; cout &lt;&lt; &quot;Base::g&quot; &lt;&lt; endl; &#125;</span><br><span class="line">virtual void h() &#123; cout &lt;&lt; &quot;Base::h&quot; &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>按照上面的说法，我们可以通过Base的实例来得到虚函数表，这个表（数组）存了指向f，g，h这三个函数的指针</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span><span class="params">(*Fun)</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Base bObj;</span><br><span class="line">Fun pFun = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//指向void* pf(void)类的函数的指针pFun</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;虚函数表的地址：&quot;</span> &lt;&lt; (<span class="keyword">int</span>*)(&amp;bObj) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;虚函数表的第一个函数地址：&quot;</span> &lt;&lt; (<span class="keyword">int</span>*) * (<span class="keyword">int</span>*)(&amp;bObj) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//再次取址得到第一个虚函数的地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第一个虚函数</span></span><br><span class="line">pFun = (Fun) * ((<span class="keyword">int</span>*) * (<span class="keyword">int</span>*)(&amp;bObj));</span><br><span class="line">pFun();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们拆分开来慢慢看这段代码</p><p>Copy</p><p><code>typedef void(*Fun)(void);</code> </p><p><code>typedef void(*Fun)(void)</code>是利用类型别名声明一个函数指针，指向的地址为NULL，等价于<code>typedef decltype(void) *Fun</code></p><p>现在插入几个断点，以观察指针pFun的变化：</p><p><a href="https://img2018.cnblogs.com/blog/1536438/201909/1536438-20190928011657120-1915245947.png"><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://img2018.cnblogs.com/blog/1536438/201909/1536438-20190928011657120-1915245947.png"></a></p><p>Base实例化了对象了bObj，然后<code>Fun pFun=NULL</code>则是声明了一个返回指向函数的指针</p><p><a href="https://img2018.cnblogs.com/blog/1536438/201909/1536438-20190926175636977-130682035.png"><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://img2018.cnblogs.com/blog/1536438/201909/1536438-20190926175636977-130682035.png"></a></p><p>这里断点断在<code>Fun pFun=NULL</code>之前，可以看到pFun还未被初始化</p><p><a href="https://img2018.cnblogs.com/blog/1536438/201909/1536438-20190926175648564-449607577.png"><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://img2018.cnblogs.com/blog/1536438/201909/1536438-20190926175648564-449607577.png"></a></p><p>初始化pFun=NULL后值变成了<code>0x00000000</code></p><p><a href="https://img2018.cnblogs.com/blog/1536438/201909/1536438-20190926175712654-1652053892.png"><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://img2018.cnblogs.com/blog/1536438/201909/1536438-20190926175712654-1652053892.png"></a></p><p><a href="https://img2018.cnblogs.com/blog/1536438/201909/1536438-20190926175719383-2041988948.png"><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://img2018.cnblogs.com/blog/1536438/201909/1536438-20190926175719383-2041988948.png"></a></p><p>实例出对象bObj后，我们用<code>(int*)(&amp;bObj)</code>强行把<code>&amp;bObj</code>转成<code>int*</code>，取得虚函数表的地址，也就是一个指向虚函数表这个数组的首元素的地址的指针，对这个指针<strong>再次取址</strong>就可以得到第一个虚函数（数组首元素）的地址了，也就是第一个虚函数<code>Base::f()</code>的地址</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;虚函数表的地址：&quot;</span> &lt;&lt; (<span class="keyword">int</span>*)(&amp;bObj) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;虚函数表的第一个函数地址：&quot;</span> &lt;&lt; (<span class="keyword">int</span>*) * (<span class="keyword">int</span>*)(&amp;bObj) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//再次取址得到第一个虚函数的地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第一个虚函数</span></span><br><span class="line">pFun = (Fun) * ((<span class="keyword">int</span>*) * (<span class="keyword">int</span>*)(&amp;bObj));</span><br><span class="line">pFun();</span><br></pre></td></tr></table></figure><p>你可能看不太懂这个操作，对<code>(int*) * (int*)(&amp;bObj)</code>可以这样理解，<code>(int*)(&amp;bObj)</code>就是对象bObj被强制转换成了<code>int*</code>了的地址，如果直接调用<code>*(int*)(&amp;bObj)</code>则是指向对象bObj地址所指向的数据，但是此处是个虚函数表，所以指不过去，必须通过<code>(int*)</code>将其转换成<strong>函数指针</strong>来进行指向，<code>(int*) * (int*)(&amp;bObj)</code>的指向就变成了对象bObj中第一个函数的地址</p><p>又因为<code>pFun</code>是由<code>Fun</code>这个函数声明的函数指针，所以相当于是Fun的实体，必须再将这个地址转换成<code>pFun</code>认识的类型，即加上<code>(Fun)*</code>进行强制转换</p><p>整个过程简单来说，就是从bObj地址开始读取四个字节的内容（<code>&amp;bObj</code>），然后将这个内容解释成一个内存地址(<code>(int*)(&amp;bObj)</code>)，再访问这个地址(<code>(int*) * (int*)(&amp;bObj)</code>)，最后将这个地址中存放的值再解释成一个函数的地址(<code>(Fun) * ((int*) * (int*)(&amp;bObj))</code>)</p><p><a href="https://img2018.cnblogs.com/blog/1536438/201909/1536438-20190926175742001-1469250498.png"><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://img2018.cnblogs.com/blog/1536438/201909/1536438-20190926175742001-1469250498.png"></a></p><p>可以看到pFun的值已经等于虚函数表首元素（<code>_vfptr[0]</code>）的值<code>0x00b41168</code>了，也就是说pFun这个指向函数的指针已经指向了函数<code>f()</code>（记住虚函数表存的是指向虚函数的指针，所以值就是这些虚函数的地址）</p><p><a href="https://img2018.cnblogs.com/blog/1536438/201909/1536438-20190926175751041-1548842945.png"><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://img2018.cnblogs.com/blog/1536438/201909/1536438-20190926175751041-1548842945.png"></a></p><p>控制台的输出：</p><p><a href="https://img2018.cnblogs.com/blog/1536438/201909/1536438-20190926175802791-1127775225.png"><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://img2018.cnblogs.com/blog/1536438/201909/1536438-20190926175802791-1127775225.png"></a></p><p>和数组一样，如果要调用<code>Base::g()</code>和<code>Base::h()</code>，我们可以：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pFun = (Fun) * ((<span class="keyword">int</span>*) * (<span class="keyword">int</span>*)(&amp;bObj));</span><br><span class="line">    <span class="comment">// (Fun) * ((int*) * (int*)(&amp;bObj) + 1);// Base::g()</span></span><br><span class="line">    <span class="comment">// (Fun) * ((int*) * (int*)(&amp;bObj) + 2);// Base::h()` </span></span><br></pre></td></tr></table></figure><p>再看一次这张图，是不是更清晰了一点？</p><p><a href="https://img2018.cnblogs.com/blog/1536438/201909/1536438-20190926190448985-466463034.png"><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://img2018.cnblogs.com/blog/1536438/201909/1536438-20190926190448985-466463034.png"></a></p><p>现在我们来看看出现继承时的情况</p><h3 id="单继承（无覆盖）"><a href="#单继承（无覆盖）" class="headerlink" title="单继承（无覆盖）"></a>单继承（无覆盖）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base::f()&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base::g()&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">h</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base::h()&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derive</span> :</span><span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f1</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Derive::f1()&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">g1</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Derive::g1()&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">h1</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Derive::h1()&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://img2018.cnblogs.com/blog/1536438/201909/1536438-20190926191244778-304680816.png"><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://img2018.cnblogs.com/blog/1536438/201909/1536438-20190926191244778-304680816.png"></a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span><span class="params">(*Fun)</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//Base bObj;</span></span><br><span class="line">Derive dObj;</span><br><span class="line">Fun pFun = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;虚函数表的地址:&quot;</span> &lt;&lt; (<span class="keyword">int</span>*)(&amp;dObj) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;虚函数表的第一个函数地址:&quot;</span> &lt;&lt; (<span class="keyword">int</span>*) * (<span class="keyword">int</span>*)(&amp;dObj) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">pFun = (Fun) * ((<span class="keyword">int</span>*) * (<span class="keyword">int</span>*)(&amp;dObj) + <span class="number">0</span>);</span><br><span class="line">pFun();</span><br><span class="line">pFun = (Fun) * ((<span class="keyword">int</span>*) * (<span class="keyword">int</span>*)(&amp;dObj) + <span class="number">1</span>);</span><br><span class="line">pFun();</span><br><span class="line">pFun = (Fun) * ((<span class="keyword">int</span>*) * (<span class="keyword">int</span>*)(&amp;dObj) + <span class="number">2</span>);</span><br><span class="line">pFun();</span><br><span class="line">pFun = (Fun) * ((<span class="keyword">int</span>*) * (<span class="keyword">int</span>*)(&amp;dObj) + <span class="number">3</span>);</span><br><span class="line">pFun();</span><br><span class="line">pFun = (Fun) * ((<span class="keyword">int</span>*) * (<span class="keyword">int</span>*)(&amp;dObj) + <span class="number">4</span>);</span><br><span class="line">pFun();</span><br><span class="line">pFun = (Fun) * ((<span class="keyword">int</span>*) * (<span class="keyword">int</span>*)(&amp;dObj) + <span class="number">5</span>);</span><br><span class="line">pFun();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过vs断点，我们发现到+3时，pFun的值变成了虚函数f1的地址：</p><p><a href="https://img2018.cnblogs.com/blog/1536438/201909/1536438-20190926195047898-684407568.png"><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://img2018.cnblogs.com/blog/1536438/201909/1536438-20190926195047898-684407568.png"></a><br><a href="https://img2018.cnblogs.com/blog/1536438/201909/1536438-20190926195054886-206091759.png"><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://img2018.cnblogs.com/blog/1536438/201909/1536438-20190926195054886-206091759.png"></a></p><p>运行结果：</p><p><a href="https://img2018.cnblogs.com/blog/1536438/201909/1536438-20190926195109712-2168565.png"><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://img2018.cnblogs.com/blog/1536438/201909/1536438-20190926195109712-2168565.png"></a></p><p>这个没有覆盖的继承关系中，子类没有重载任何父类的函数，我们实例化了一个对象dOb，它的虚函数表如下：</p><p><a href="https://img2018.cnblogs.com/blog/1536438/201909/1536438-20190926195246032-457824307.png"><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://img2018.cnblogs.com/blog/1536438/201909/1536438-20190926195246032-457824307.png"></a></p><h4 id="也就是说"><a href="#也就是说" class="headerlink" title="也就是说"></a>也就是说</h4><ol><li>虚函数按照其声明顺序放于表中</li><li>父类的虚函数在子类的虚函数前</li></ol><h3 id="单继承（有覆盖）"><a href="#单继承（有覆盖）" class="headerlink" title="单继承（有覆盖）"></a>单继承（有覆盖）</h3><p>现在我们修改下Derive类</p><p><a href="https://img2018.cnblogs.com/blog/1536438/201909/1536438-20190926191157284-914109293.png"><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://img2018.cnblogs.com/blog/1536438/201909/1536438-20190926191157284-914109293.png"></a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base::f()&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base::g()&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">h</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base::h()&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derive</span> :</span><span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Derive::f()&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">g1</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Derive::g1()&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">h1</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Derive::h1()&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个继承关系中，Derive的<code>f()</code>重载了Base类中的<code>f()</code>，下面我们用同样的方法调试，main函数基本不变</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//Base bObj;</span></span><br><span class="line">Derive dObj;</span><br><span class="line">Fun pFun = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;虚函数表的地址:&quot;</span> &lt;&lt; (<span class="keyword">int</span>*)(&amp;dObj) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;虚函数表的第一个函数地址:&quot;</span> &lt;&lt; (<span class="keyword">int</span>*) * (<span class="keyword">int</span>*)(&amp;dObj) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">pFun = (Fun) * ((<span class="keyword">int</span>*) * (<span class="keyword">int</span>*)(&amp;dObj) + <span class="number">0</span>);</span><br><span class="line">pFun();</span><br><span class="line">pFun = (Fun) * ((<span class="keyword">int</span>*) * (<span class="keyword">int</span>*)(&amp;dObj) + <span class="number">1</span>);</span><br><span class="line">pFun();</span><br><span class="line">pFun = (Fun) * ((<span class="keyword">int</span>*) * (<span class="keyword">int</span>*)(&amp;dObj) + <span class="number">2</span>);</span><br><span class="line">pFun();</span><br><span class="line">pFun = (Fun) * ((<span class="keyword">int</span>*) * (<span class="keyword">int</span>*)(&amp;dObj) + <span class="number">3</span>);</span><br><span class="line">pFun();</span><br><span class="line">pFun = (Fun) * ((<span class="keyword">int</span>*) * (<span class="keyword">int</span>*)(&amp;dObj) + <span class="number">4</span>);</span><br><span class="line">pFun();</span><br><span class="line">pFun = (Fun) * ((<span class="keyword">int</span>*) * (<span class="keyword">int</span>*)(&amp;dObj) + <span class="number">5</span>);</span><br><span class="line">pFun();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://img2018.cnblogs.com/blog/1536438/201909/1536438-20190926195517663-1904479244.png"><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://img2018.cnblogs.com/blog/1536438/201909/1536438-20190926195517663-1904479244.png"></a></p><p>可以看到第一个函数变成了<code>Derive::f()</code>，并且运行到<code>pFun = (Fun) * ((int*) * (int*)(&amp;dObj) + 5)</code>时，pFun的值变成了空</p><p><a href="https://img2018.cnblogs.com/blog/1536438/201909/1536438-20190926195628221-1990311709.png"><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://img2018.cnblogs.com/blog/1536438/201909/1536438-20190926195628221-1990311709.png"></a></p><p>也就是说现在虚函数表的结构是这样的：</p><p><a href="https://img2018.cnblogs.com/blog/1536438/201909/1536438-20190926195729870-2091731635.png"><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://img2018.cnblogs.com/blog/1536438/201909/1536438-20190926195729870-2091731635.png"></a></p><h4 id="也就是说-1"><a href="#也就是说-1" class="headerlink" title="也就是说"></a>也就是说</h4><ol><li>覆盖的f()函数被放到了虚表中原来父类虚函数的位置</li><li>没有被覆盖的函数依旧</li></ol><p>因为这个特性，我们就可以看到对于下面这样的程序：</p><p>Copy</p><p><code>Base *b = new Derive(); b-&gt;f();</code> </p><p>由b所指的内存中的虚函数表的f()的位置已经被Derive::f()函数地址所取代，于是在实际调用发生时，是Derive::f()被调用了，这就实现了C++的动态多态</p><h3 id="多重继承（无覆盖）"><a href="#多重继承（无覆盖）" class="headerlink" title="多重继承（无覆盖）"></a>多重继承（无覆盖）</h3><p><a href="https://img2018.cnblogs.com/blog/1536438/201909/1536438-20190926191318605-217907620.png"><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://img2018.cnblogs.com/blog/1536438/201909/1536438-20190926191318605-217907620.png"></a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base1</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base1::f()&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base1::g()&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">h</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base1::h()&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base2</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base2::f()&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base2::g()&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">h</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base2::h()&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base3</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base3::f()&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base3::g()&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">h</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base3::h()&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derive</span> :</span><span class="keyword">public</span> Base1, <span class="keyword">public</span> Base2, <span class="keyword">public</span> Base3 &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f1</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Derive::f1()&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">g1</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Derive::g1()&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span><span class="params">(*Fun)</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//Base bObj;</span></span><br><span class="line">Derive dObj;</span><br><span class="line">Fun pFun = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;虚函数表的地址:&quot;</span> &lt;&lt; (<span class="keyword">int</span>*)(&amp;dObj) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;虚函数表的第一个函数地址:&quot;</span> &lt;&lt; (<span class="keyword">int</span>*) * (<span class="keyword">int</span>*)(&amp;dObj) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">pFun = (Fun) * ((<span class="keyword">int</span>*) * (<span class="keyword">int</span>*)(&amp;dObj) + <span class="number">0</span>);</span><br><span class="line">pFun();</span><br><span class="line">pFun = (Fun) * ((<span class="keyword">int</span>*) * (<span class="keyword">int</span>*)(&amp;dObj) + <span class="number">1</span>);</span><br><span class="line">pFun();</span><br><span class="line">pFun = (Fun) * ((<span class="keyword">int</span>*) * (<span class="keyword">int</span>*)(&amp;dObj) + <span class="number">2</span>);</span><br><span class="line">pFun();</span><br><span class="line">pFun = (Fun) * ((<span class="keyword">int</span>*) * (<span class="keyword">int</span>*)(&amp;dObj) + <span class="number">3</span>);</span><br><span class="line">pFun();</span><br><span class="line">pFun = (Fun) * ((<span class="keyword">int</span>*) * (<span class="keyword">int</span>*)(&amp;dObj) + <span class="number">4</span>);</span><br><span class="line">pFun();</span><br><span class="line">pFun = (Fun) * ((<span class="keyword">int</span>*) * (<span class="keyword">int</span>*)(&amp;dObj) + <span class="number">5</span>);</span><br><span class="line">pFun();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过断点可以看到，当运行到这里</p><p><a href="https://img2018.cnblogs.com/blog/1536438/201909/1536438-20190926200825661-1865333537.png"><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://img2018.cnblogs.com/blog/1536438/201909/1536438-20190926200825661-1865333537.png"></a></p><p>pFun变成了空指针</p><p><a href="https://img2018.cnblogs.com/blog/1536438/201909/1536438-20190926200836488-1566850203.png"><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://img2018.cnblogs.com/blog/1536438/201909/1536438-20190926200836488-1566850203.png"></a></p><p>控制台结果</p><p><a href="https://img2018.cnblogs.com/blog/1536438/201909/1536438-20190926200852574-1961968282.png"><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://img2018.cnblogs.com/blog/1536438/201909/1536438-20190926200852574-1961968282.png"></a></p><p>为什么+5之后找不到了呢？因为在多继承下，虚函数表存储方式发生了点变化，我们之前说到C++编译器在对象内加入了一个隐藏成员，现在你可以理解为，在多继承时加入了多个隐藏成员，也就是说我们现在有多个虚函数表，具体排列方式如下图：</p><p><a href="https://img2018.cnblogs.com/blog/1536438/201909/1536438-20190926201736420-486568218.png"><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://img2018.cnblogs.com/blog/1536438/201909/1536438-20190926201736420-486568218.png"></a></p><p>那我们有没有办法访问呢？强大的C++当然是有的，细心的你应该发现了，这个表（数组）其实只是变成了一个二维数组</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Fun pFun = <span class="literal">NULL</span>;</span><br><span class="line">Derive dObj;</span><br><span class="line"><span class="keyword">int</span>** pVtab = (<span class="keyword">int</span>**)&amp; dObj;</span><br><span class="line"><span class="comment">//Base1&#x27;s vtable</span></span><br><span class="line">pFun = (Fun)pVtab[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line"><span class="comment">//等价于：pFun = (Fun) * ((int*) * (int*)((int*)&amp; dObj + 0) + 0);</span></span><br><span class="line">pFun();</span><br><span class="line">pFun = (Fun)pVtab[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">pFun();</span><br><span class="line">pFun = (Fun)pVtab[<span class="number">0</span>][<span class="number">2</span>];</span><br><span class="line">pFun();</span><br><span class="line"></span><br><span class="line"><span class="comment">//Derive&#x27;s vtable</span></span><br><span class="line">pFun = (Fun)pVtab[<span class="number">0</span>][<span class="number">3</span>];</span><br><span class="line">pFun();</span><br><span class="line"><span class="comment">//The tail of the vtable</span></span><br><span class="line">pFun = (Fun)pVtab[<span class="number">0</span>][<span class="number">4</span>];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; pFun &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Base2&#x27;s vtable</span></span><br><span class="line">pFun = (Fun)pVtab[<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">pFun();</span><br><span class="line">pFun = (Fun)pVtab[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">pFun();</span><br><span class="line">pFun = (Fun)pVtab[<span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line">pFun();</span><br><span class="line"><span class="comment">//The tail of the vtable</span></span><br><span class="line">pFun = (Fun)pVtab[<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; pFun &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Base3&#x27;s vtable</span></span><br><span class="line">pFun = (Fun)pVtab[<span class="number">2</span>][<span class="number">0</span>];</span><br><span class="line">pFun();</span><br><span class="line">pFun = (Fun)pVtab[<span class="number">2</span>][<span class="number">1</span>];</span><br><span class="line">pFun();</span><br><span class="line">pFun = (Fun)pVtab[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">pFun();</span><br><span class="line">pFun = (Fun)pVtab[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; pFun &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="也就是说-2"><a href="#也就是说-2" class="headerlink" title="也就是说"></a>也就是说</h4><h3 id="多重继承（有覆盖）"><a href="#多重继承（有覆盖）" class="headerlink" title="多重继承（有覆盖）"></a>多重继承（有覆盖）</h3><p><a href="https://img2018.cnblogs.com/blog/1536438/201909/1536438-20190926191343226-1048295386.png"><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://img2018.cnblogs.com/blog/1536438/201909/1536438-20190926191343226-1048295386.png"></a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base1</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base1::f()&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base1::g()&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">h</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base1::h()&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base2</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base2::f()&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base2::g()&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">h</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base2::h()&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base3</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base3::f()&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base3::g()&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">h</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base3::h()&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derive</span> :</span><span class="keyword">public</span> Base1, <span class="keyword">public</span> Base2, <span class="keyword">public</span> Base3 &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Derive::f()&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">g1</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Derive::g1()&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>main函数不再赘述，最终你会发现现在的虚函数表是这样的：</p><p><a href="https://img2018.cnblogs.com/blog/1536438/201909/1536438-20190926204243743-1627866389.png"><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://img2018.cnblogs.com/blog/1536438/201909/1536438-20190926204243743-1627866389.png"></a></p><h2 id="安全性问题"><a href="#安全性问题" class="headerlink" title="安全性问题"></a>安全性问题</h2><p>水能载舟，<del>亦可赛艇</del>亦能覆舟，接下来让我们看看虚函数表可以用来干点什么坏事吧</p><h3 id="通过父类型的指针访问子类自己的虚函数"><a href="#通过父类型的指针访问子类自己的虚函数" class="headerlink" title="通过父类型的指针访问子类自己的虚函数"></a>通过父类型的指针访问子类自己的虚函数</h3><p>虽然在上面的图中我们可以看到Base1的虚表中有Derive的虚函数，但我们根本不可能使用下面的语句来调用子类的自有虚函数：</p><p>Copy</p><p><code>Base1 *b1 = new Derive(); b1-&gt;f1();  //编译出错</code> </p><p>任何妄图使用父类指针调用<strong>子类中的未覆盖父类的成员函数</strong>的行为都会被编译器视为非法，所以，这样的程序根本无法编译通过</p><p>但通过多继承部分的代码你应该已经发现了</p><p>在运行时，我们可以通过指针的方式访问虚函数表来达到违反C++语义的行为（也就是我们在多重继承中使用的代码）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Fun pFun = <span class="literal">NULL</span>;</span><br><span class="line">Derive dObj;</span><br><span class="line"><span class="keyword">int</span>** pVtab = (<span class="keyword">int</span>**)&amp; dObj;</span><br><span class="line"><span class="comment">//Base1&#x27;s vtable</span></span><br><span class="line">pFun = (Fun)pVtab[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line"><span class="comment">//等价于：pFun = (Fun) * ((int*) * (int*)((int*)&amp; dObj + 0) + 0);</span></span><br><span class="line"><span class="comment">//Derive&#x27;s vtable</span></span><br><span class="line">pFun = (Fun)pVtab[<span class="number">0</span>][<span class="number">3</span>];</span><br><span class="line">pFun();</span><br><span class="line"><span class="comment">//The tail of the vtable</span></span><br><span class="line">pFun = (Fun)pVtab[<span class="number">0</span>][<span class="number">4</span>];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; pFun &lt;&lt; <span class="built_in">endl</span>;` </span><br></pre></td></tr></table></figure><h3 id="访问非public的虚函数"><a href="#访问非public的虚函数" class="headerlink" title="访问非public的虚函数"></a>访问非public的虚函数</h3><p>父类非public的虚函数<strong>同样会存在于虚函数表中</strong>，所以，我们同样可以使用访问虚函数表的方式来访问这些non-public的虚函数，这是很容易做到的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base::f&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derive</span> :</span> <span class="keyword">public</span> Base &#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span><span class="params">(*Fun)</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Derive d;</span><br><span class="line">Fun  pFun = (Fun) * ((<span class="keyword">int</span>*) * (<span class="keyword">int</span>*)(&amp;d) + <span class="number">0</span>);</span><br><span class="line">pFun();<span class="comment">//挖藕？</span></span><br><span class="line">&#125;`</span><br></pre></td></tr></table></figure><h2 id="最后注意"><a href="#最后注意" class="headerlink" title="最后注意"></a>最后注意</h2><p>虚函数表不一定是存在最开头，但是目前各个编译器大多是这样设置的</p><h1 id="虚函数表例子"><a href="#虚函数表例子" class="headerlink" title="虚函数表例子"></a>虚函数表例子</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Human eat&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">walk</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Human walk&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Human human;</span><br><span class="line">    <span class="keyword">void</span> (*Eat)() = (<span class="keyword">void</span>(*)())*((<span class="keyword">int</span>*)*(<span class="keyword">int</span>*)&amp;human);</span><br><span class="line">    Eat();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> (*Walk)() = (<span class="keyword">void</span>(*)())*((<span class="keyword">int</span>*)*(<span class="keyword">int</span>*)&amp;human + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    Walk();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:<br>Human eat<br>Human walk</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 编程 </tag>
            
            <tag> 虚函数 </tag>
            
            <tag> 虚函数表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 友元</title>
      <link href="posts/35616.html"/>
      <url>posts/35616.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h2><p>友元可以访问私有成员，但友元函数不属于这个类。</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Date</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> year = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> month = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> day = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> hour = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> minute = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> second = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Date() : Date(<span class="number">1970</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Date(<span class="keyword">int</span> year,<span class="keyword">int</span> month,<span class="keyword">int</span> day,<span class="keyword">int</span> hour,<span class="keyword">int</span> minute,<span class="keyword">int</span> second) : year(year),month(month),day(day),hour(hour),minute(minute),second(second)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">void</span> <span class="keyword">operator</span>&lt;&lt;(<span class="keyword">const</span> ostream&amp; _cout,<span class="keyword">const</span> Date&amp; date);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="keyword">operator</span>&lt;&lt;(<span class="keyword">const</span> ostream&amp; _cout,<span class="keyword">const</span> Date&amp; date)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; date.year &lt;&lt; <span class="string">&quot;-&quot;</span> &lt;&lt; date.month &lt;&lt; <span class="string">&quot;-&quot;</span> &lt;&lt; date.day &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; date.hour &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; date.minute &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; date.second ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Date <span class="title">date</span><span class="params">(<span class="number">2020</span>,<span class="number">4</span>,<span class="number">10</span>,<span class="number">13</span>,<span class="number">16</span>,<span class="number">00</span>)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt;date;</span><br><span class="line">    getchar();</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 友元 </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eclipse查看jre源码方法</title>
      <link href="posts/1932.html"/>
      <url>posts/1932.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li>在Eclipse中，Window|Preferences|Java|Installed JREs</li><li>在右侧选择jre6，点击Edit按钮</li><li>选中rt.jar文件的这一项：“C:\Program Files\Java\jre6\lib\rt.jar“，点击左边的“+” 号展开它</li><li>展开后，可以看到“Source Attachment:(none)”，点击这项，然后点右边的按钮“Source Attachment…”, 选择你的JDK目录下的”src.zip”文件 .</li><li>确认OK</li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> Java </tag>
            
            <tag> Eclipse </tag>
            
            <tag> jre </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java动态代理</title>
      <link href="posts/2812.html"/>
      <url>posts/2812.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h2><p>不是任何类都可以被动态代理，至少在Java层不能！</p><p>不是任何类都可以被动态代理，至少在Java层不能！</p><p>不是任何类都可以被动态代理，至少在Java层不能！</p><p>能动态代理的类的条件:</p><ol><li><p>能代理对象必须实现了接口，否则不能被动态代理。而且我们只能代理这个接口里的方法，其他方法不能代理</p></li><li><p>如果被系统回收，hook就失效了。如果要长期生效，那么hook的生命周期应该是对应响应的生命周期，如应用全局的生命周期</p></li></ol><h2 id="动态代理概念"><a href="#动态代理概念" class="headerlink" title="动态代理概念"></a>动态代理概念</h2><p>动态代理在Java中有着广泛的应用，比如Spring AOP、Hibernate数据查询、测试框架的后端mock、RPC远程调用、Java注解对象获取、日志、用户鉴权、全局性异常处理、性能监控，甚至事务处理等。</p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>代理模式：给某一个对象提供一个代理，并由代理对象来控制对真实对象的访问。代理模式是一种结构型设计模式。</p><p>代理模式角色分为 3 种：</p><ol><li><p>Subject（抽象主题角色）：定义代理类和真实主题的公共对外方法，也是代理类代理真实主题的方法；</p></li><li><p>RealSubject（真实主题角色）：真正实现业务逻辑的类；</p></li><li><p>Proxy（代理主题角色）：用来代理和封装真实主题；</p></li></ol><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>JDK动态代理主要涉及两个类：<code>java.lang.reflect.Proxy</code> 和 <code>java.lang.reflect.InvocationHandler</code>，我们通过案例来学习</p><figure class="highlight java"><figcaption><span>Girl.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> learn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Girl</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">date</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">watchMovie</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>GirlFriend.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> learn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GirlFriend</span> <span class="keyword">implements</span> <span class="title">Girl</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">date</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Let&#x27;s date!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">watchMovie</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Let&#x27;s watch movies!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>Family.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> learn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Family</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Girl girl;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Family</span><span class="params">(Girl girl)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line"><span class="keyword">this</span>.girl = girl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot;You think peach&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>Basic.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> learn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.sql.Date;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.print.attribute.standard.Fidelity;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Basic</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">GirlFriend girlfriend = <span class="keyword">new</span> GirlFriend();</span><br><span class="line">InvocationHandler handler = <span class="keyword">new</span> Family(girlfriend);</span><br><span class="line">Girl familyProxy= (Girl) Proxy.newProxyInstance(family.class.getClassLoader(), GirlFriend .class.getInterfaces(), handler);</span><br><span class="line">familyProxy.watchMovie();;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:</p><p>You think peach</p><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>动态代理为Java层Hook提供了途径,如有兴趣请阅读 <a class="btn-beautify button--animated outline blue larger" href="/posts/15696.html"   title="Java层Hook"><i class="far fa-hand-point-right fa-fw"></i><span>Java层Hook</span></a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> Java </tag>
            
            <tag> 动态代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java层Hook</title>
      <link href="posts/15696.html"/>
      <url>posts/15696.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、什么是Hook"><a href="#一、什么是Hook" class="headerlink" title="一、什么是Hook"></a>一、什么是Hook</h2><p>Hook翻译成中文就是勾子的意思，在java中它表示在事件到达终点前进行拦截或监控的一种行为。</p><h2 id="二、Hook的实现"><a href="#二、Hook的实现" class="headerlink" title="二、Hook的实现"></a>二、Hook的实现</h2><p>实现hook我们必须要知道java的反射和动态代理。</p><h3 id="1、反射"><a href="#1、反射" class="headerlink" title="1、反射"></a>1、反射</h3><p>反射是java的<strong>查看、检测、修改自身</strong>的一种行为。在编译阶段，编译器将我们编写的java文件编译成.class文件。而在运行期，jvm又将.class文件通过类加载器ClassLoader加载一个类对应的Class对象到内存当中。通过修改Class对象，达到我们查看、检测、修改自身的行为。即反射就是把Java类中的各个成分映射成一个个的Java对象，在运行状态中，对于任意一个类，都能够知道这个类的所以属性和方法；对于任意一个对象，都能调用它的任意一个方法和属性。这种动态获取信息及动态调用对象方法的功能叫Java的反射机制。</p><p>如下是反射的一个例子</p><figure class="highlight java"><figcaption><span>Customer.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id=id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age=age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>ReflectTester.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectTester</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">copy</span><span class="params">(Object object)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//获得对象的类型</span></span><br><span class="line">        Class classType=object.getClass();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过默认构造方法创建一个新的对象</span></span><br><span class="line">        Object objectCopy=classType.getConstructor(<span class="keyword">new</span> Class[]&#123;&#125;).newInstance(<span class="keyword">new</span> Object[]&#123;&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得对象的所有属性</span></span><br><span class="line">        Field fields[]=classType.getDeclaredFields();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;fields.length;i++)&#123;</span><br><span class="line">              Field field=fields[i];</span><br><span class="line"></span><br><span class="line">              String fieldName=field.getName();</span><br><span class="line">              String firstLetter=fieldName.substring(<span class="number">0</span>,<span class="number">1</span>).toUpperCase();</span><br><span class="line">              <span class="comment">//获得和属性对应的getXXX()方法的名字</span></span><br><span class="line">              String getMethodName=<span class="string">&quot;get&quot;</span>+firstLetter+fieldName.substring(<span class="number">1</span>);</span><br><span class="line">              <span class="comment">//获得和属性对应的setXXX()方法的名字</span></span><br><span class="line">              String setMethodName=<span class="string">&quot;set&quot;</span>+firstLetter+fieldName.substring(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">              <span class="comment">//获得和属性对应的getXXX()方法</span></span><br><span class="line">              Method getMethod=classType.getMethod(getMethodName,<span class="keyword">new</span> Class[]&#123;&#125;);</span><br><span class="line">              <span class="comment">//获得和属性对应的setXXX()方法</span></span><br><span class="line">              Method setMethod=classType.getMethod(setMethodName,<span class="keyword">new</span> Class[]&#123;field.getType()&#125;);</span><br><span class="line"></span><br><span class="line">              <span class="comment">//调用原对象的getXXX()方法</span></span><br><span class="line">              Object value=getMethod.invoke(object,<span class="keyword">new</span> Object[]&#123;&#125;);</span><br><span class="line">              System.out.println(fieldName+<span class="string">&quot;:&quot;</span>+value);</span><br><span class="line">              <span class="comment">//调用拷贝对象的setXXX()方法</span></span><br><span class="line">             setMethod.invoke(objectCopy,<span class="keyword">new</span> Object[]&#123;value&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> objectCopy;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">　　Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">　　customer.setId(<span class="number">10L</span>);</span><br><span class="line">　　customer.setName(<span class="string">&quot;adam&quot;</span>);</span><br><span class="line">　　customer.setAge(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">　　<span class="keyword">new</span> ReflectTester().copy(customer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:</p><p><code>id:10</code></p><p><code>name:adam</code></p><p><code>age:3</code></p><h3 id="2、动态代理"><a href="#2、动态代理" class="headerlink" title="2、动态代理"></a>2、动态代理</h3><p>动态代理相对静态代理而言，动态代理是动态的，通过反射对被代理对象的方法，代理成代理对象对应的方法。动态代理也运用到了反射的知识。<br>下面仍然通过一个例子来说明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> learn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Modifier;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Basic</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="comment">//获取 System.out 变量</span></span><br><span class="line">        Field originField = Class.forName(<span class="string">&quot;java.lang.System&quot;</span>).getDeclaredField(<span class="string">&quot;out&quot;</span>);</span><br><span class="line">        <span class="comment">//设置变量可利用</span></span><br><span class="line">        originField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//获取变量的modifiers</span></span><br><span class="line">        Field modifiers = originField.getClass().getDeclaredField(<span class="string">&quot;modifiers&quot;</span>);</span><br><span class="line">        <span class="comment">//设置modifiers 可利用</span></span><br><span class="line">        modifiers.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 去除final修饰符</span></span><br><span class="line">        modifiers.setInt(originField, originField.getModifiers() &amp; ~Modifier.FINAL);</span><br><span class="line">        <span class="comment">//替换变量</span></span><br><span class="line">        originField.set(<span class="keyword">null</span>, <span class="keyword">new</span> PrintStream((OutputStream) originField.get(<span class="keyword">null</span>)) &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(String x)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">super</span>.println(<span class="string">&quot;[Hook Success]:&quot;</span> + x);</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//加回final修饰符</span></span><br><span class="line">        modifiers.setInt(originField, originField.getModifiers() &amp; ~Modifier.FINAL);</span><br><span class="line">        <span class="comment">//测试效果</span></span><br><span class="line">        System.out.println(<span class="string">&quot;No way&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:</p><p><code>[Hook Success]:No way</code></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> Java </tag>
            
            <tag> Hook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQLite可视化管理工具-DB Browser for SQLite</title>
      <link href="posts/40140.html"/>
      <url>posts/40140.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="软件截图"><a href="#软件截图" class="headerlink" title="软件截图"></a>软件截图</h2><p><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://hurrisonx.gitee.io/pic/2020/20.webp" alt="图片无法显示"></p><h2 id="软件介绍"><a href="#软件介绍" class="headerlink" title="软件介绍"></a>软件介绍</h2><p>DB Browser for SQLite_用于SQLite的数据库浏览器_（DB4S）是一种高质量，可视化的开源工具，用于创建，设计和编辑与SQLite兼容的数据库文件。</p><p>DB4S适用于想要创建，搜索和编辑数据库的用户和开发人员。DB4S使用类似电子表格的熟悉界面，而不必学习复杂的SQL命令。</p><p>控件和向导可供用户执行以下操作：</p><ul><li>创建并压缩数据库文件</li><li>创建，定义，修改和删除表</li><li>创建，定义和删除索引</li><li>浏览，编辑，添加和删除记录</li><li>搜索记录</li><li>以文本形式导入和导出记录</li><li>从CSV文件导入和导出表格</li><li>从/到SQL转储文件导入和导出数据库</li><li>发出SQL查询并检查结果</li><li>检查应用程序发出的所有SQL命令的日志</li><li>根据表或查询数据绘制简单图形</li></ul><p>该程序不是sqlite命令行工具的可视化外壳，并且<strong>不需要熟悉SQL命令</strong>。它是开发人员和最终用户都可以使用的工具，并且必须尽可能简单地使用以实现这些目标。</p><h2 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h2><a class="btn-beautify button--animated purple larger" href="https://sqlitebrowser.org/dl/"   title="官网下载"><i class="fas fa-home fa-fw"></i><span>官网下载</span></a><a class="btn-beautify button--animated purple larger" href="https://www.lanzous.com/i9ms0xc"   title="蓝奏云下载"><i class="fas fa-cloud-download-alt fa-fw"></i><span>蓝奏云下载</span></a>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sqlite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小心Sqlite的autoincrement可能会让你产生误解</title>
      <link href="posts/31882.html"/>
      <url>posts/31882.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>很多开发者在数据库建表时，都会自然而然的将主键声明为<code>autoincrement</code>，意思是想让主键自动增长，而实际上这个想法是错误的，并且也是官方不建议这么使用的，它会占用额外的CPU，内存，磁盘空间和磁盘I / O开销。</p><p><code>autoincrement</code>的主键必须是<code>INTEGER</code>类型，但是<code>INTEGER</code>类型的主键本身默认就是自动增长的。<br>所以<code>autoincrement</code>并不是字面上“自动增长”的意思(或许2.3.4版本以前是，但现在不是)，而是表示当id等于最大支持的数后（9223372036854775807），再插入数据时是否可以重复使用原来已删除或没有使用的行。</p><p><code>autoincrement</code> 默认为false时可以。</p><p><code>autoincrement</code>设置为true时不可以，并抛出错误：[Err] 13 – database or disk is full</p><p>甚至于，如果不需要建立表关系的情况下，主键也不是必须的，因为默认情况下sqlite会为表中每条数据配分一个自增长的<code>rowid</code>，用于标识行的唯一。</p><p>可以试下这行代码看看是否能查到</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> rowid <span class="keyword">FROM</span> TABLE_NAME;</span><br></pre></td></tr></table></figure><p><code>rowid</code>也可替换成<code>_rowid_</code>或<code>oid</code></p><p>在建表时声明<code>id INTEGER PRIMARY KEY</code>实际上是为<code>rowid</code>声明了一个别名，所以这也是为什么<code>INTERGER</code>主键默认自动增长的原因。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sqlite </tag>
            
            <tag> 易错 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQLite增删查改C++实例</title>
      <link href="posts/40886.html"/>
      <url>posts/40886.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="1-什么是-SQLite？"><a href="#1-什么是-SQLite？" class="headerlink" title="1.什么是 SQLite？"></a>1.什么是 SQLite？</h3><p>SQLite是一个进程内的库，实现了自给自足的、无服务器的、零配置的、事务性的 SQL 数据库引擎。它是一个零配置的数据库，这意味着与其他数据库不一样，您不需要在系统中配置。就像其他数据库，SQLite 引擎不是一个独立的进程，可以按应用程序需求进行静态或动态连接。SQLite 直接访问其存储文件。</p><h3 id="2-为什么要用-SQLite？"><a href="#2-为什么要用-SQLite？" class="headerlink" title="2.为什么要用 SQLite？"></a>2.为什么要用 SQLite？</h3><ul><li>不需要一个单独的服务器进程或操作的系统（无服务器的）。</li><li>SQLite 不需要配置，这意味着不需要安装或管理。</li><li>一个完整的 SQLite 数据库是存储在一个单一的跨平台的磁盘文件。</li><li>SQLite 是非常小的，是轻量级的，完全配置时小于 400KiB，省略可选功能配置时小于250KiB。</li><li>SQLite 是自给自足的，这意味着不需要任何外部的依赖。</li><li>SQLite 事务是完全兼容 ACID 的，允许从多个进程或线程安全访问。</li><li>SQLite 支持 SQL92（SQL2）标准的大多数查询语言的功能。</li><li>SQLite 使用 ANSI-C 编写的，并提供了简单和易于使用的 API。</li><li>SQLite 可在 UNIX（Linux, Mac OS-X, Android, iOS）和 Windows（Win32, WinCE, WinRT）中运行。</li></ul><h3 id="3-SQLite局限"><a href="#3-SQLite局限" class="headerlink" title="3.SQLite局限"></a>3.SQLite局限</h3><ul><li>SQLite是整个数据库级别的读写锁，大量并行读写，可能存在冲突。因此不适合多个进程并行读写的情况。</li><li>并发性差。SQLite只支持平面事务；它没有嵌套和营救点能力。嵌套意味着在一个事务中可以有子事务的能力。营救点允许一个事务返回到前面已经到达的状态。它没有能力确保高层次事务的并发。它允许在单个的数据库文件上多个并发的读事务，但是只能有一个排他的写事务。这个局限性意味着如果有事务在读数据库文件的一部分，所有其他的事务将被禁止写该文件的任何一部分。类似的，如果有事务在写数据库文件的一部分，所有其他事务将被禁止读或者写该文件的任何一部分。</li><li>Sqlite不可能把数据库对象分别部属在不同的计算机上，也就是说不可能实现数据库的clusting。如果要有这个特性，需要考虑其他C/S架构的数据库。</li><li>SQLite使用本地文件锁原语来控制事务处理的并发性。如果数据库文件驻留在网络分区上，可能会导致文件锁不能工作。</li></ul><p>局限还有很多此处不一一列举</p><h2 id="数据库原型"><a href="#数据库原型" class="headerlink" title="数据库原型"></a>数据库原型</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> &quot;Users&quot; (</span><br><span class="line">  &quot;ID&quot;  <span class="type">INTEGER</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">UNIQUE</span>,</span><br><span class="line">  &quot;USERNAME&quot;  TEXT <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">UNIQUE</span>,</span><br><span class="line">  &quot;PASSWORD&quot;  TEXT <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  &quot;STATUS&quot;  <span class="type">INTEGER</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line">  &quot;ROOMID&quot;  <span class="type">INTEGER</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">-100</span>,</span><br><span class="line">  &quot;CONNID&quot;  <span class="type">INTEGER</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">-100</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY(&quot;ID&quot;)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> &quot;Rooms&quot; (</span><br><span class="line">  &quot;ID&quot;  <span class="type">INTEGER</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">UNIQUE</span>,</span><br><span class="line">  &quot;RoomPtr&quot;  <span class="type">INTEGER</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">UNIQUE</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY(&quot;ID&quot;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="操作实例"><a href="#操作实例" class="headerlink" title="操作实例"></a>操作实例</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sqlite3.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">UPDATE table_name</span></span><br><span class="line"><span class="comment">SET column1 = value1, column2 = value2...., columnN = valueN</span></span><br><span class="line"><span class="comment">WHERE [condition];</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//SQLITE_ERROR、SQLITE_BUSY、SQLITE_MISUSE、SQLITE_ROW、SQLITE_DONE</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GameData</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">GameData(<span class="built_in">string</span> path) &#123;</span><br><span class="line"><span class="keyword">int</span> result = sqlite3_open_v2(<span class="string">&quot;Game.db&quot;</span>, &amp;pDB, SQLITE_OPEN_READWRITE | SQLITE_OPEN_CREATE | SQLITE_OPEN_NOMUTEX | SQLITE_OPEN_SHAREDCACHE, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (result != SQLITE_OK)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="string">&quot;[GameData] Error opening database!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">~GameData() &#123;</span><br><span class="line"><span class="keyword">if</span> (pDB) &#123;</span><br><span class="line">sqlite3_close_v2(pDB);</span><br><span class="line">pDB = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">checkPassword</span><span class="params">(<span class="built_in">string</span> username, <span class="built_in">string</span> password, <span class="keyword">int</span>&amp; id)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> sql = <span class="string">&quot;SELECT ID FROM Users WHERE USERNAME=? AND PASSWORD=?;&quot;</span>;</span><br><span class="line">        <span class="comment">//进行查询前的准备工作——检查语句合法性</span></span><br><span class="line">        <span class="comment">//-1代表系统会自动计算SQL语句的长度</span></span><br><span class="line">        sqlite3_stmt* stmt = <span class="literal">NULL</span>;    <span class="comment">// stmt语句句柄</span></span><br><span class="line">        <span class="keyword">int</span> result = sqlite3_prepare_v2(pDB, sql.c_str(), sql.size(), &amp;stmt, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span> (result == SQLITE_OK) &#123;</span><br><span class="line">            <span class="comment">//绑定数据</span></span><br><span class="line">            sqlite3_bind_text(stmt, <span class="number">1</span>, username.c_str(), username.size(), SQLITE_STATIC);</span><br><span class="line">            sqlite3_bind_text(stmt, <span class="number">2</span>, password.c_str(), password.size(), SQLITE_STATIC);</span><br><span class="line">            <span class="comment">// 每调一次sqlite3_step()函数，stmt语句句柄就会指向下一条记录</span></span><br><span class="line">            <span class="keyword">if</span> (sqlite3_step(stmt) == SQLITE_ROW) &#123; <span class="comment">//because username is unique.There is only one exist at most;</span></span><br><span class="line">                <span class="comment">// 取出第0列字段的值</span></span><br><span class="line">                <span class="comment">//const unsigned char* sql_id = sqlite3_column_text(stmt, 0);</span></span><br><span class="line">                <span class="keyword">int</span> sql_id = sqlite3_column_int(stmt, <span class="number">0</span>);</span><br><span class="line">                id = sql_id;</span><br><span class="line">                sqlite3_finalize(stmt); <span class="comment">//清理句柄</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sqlite3_finalize(stmt); <span class="comment">//清理句柄</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    [[deprecated(<span class="string">&quot;[Deprecated]Please use modifyStatus(...)&quot;</span>)]]</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">login</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> modifyStatus(id,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    [[deprecated(<span class="string">&quot;[Deprecated]Please use modifyStatus(...)&quot;</span>)]]</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">logout</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> modifyStatus(id, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">modifyPassword</span><span class="params">(<span class="keyword">int</span> id, <span class="built_in">string</span> originPassword, <span class="built_in">string</span> password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (queryPassword(id) != originPassword) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> modifyPasswordByForce(id,password);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">modifyPasswordByForce</span><span class="params">(<span class="keyword">int</span> id,<span class="built_in">string</span> password)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> sql = <span class="string">&quot;UPDATE Users SET PASSWORD=? WHERE ID=?;&quot;</span>;<span class="comment">// 1 is a value that is a symbol of login status</span></span><br><span class="line">        sqlite3_stmt* stmt = <span class="literal">NULL</span>;    <span class="comment">// stmt语句句柄</span></span><br><span class="line">        <span class="keyword">int</span> result = sqlite3_prepare_v2(pDB, sql.c_str(), sql.size(), &amp;stmt, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span> (result == SQLITE_OK) &#123;</span><br><span class="line">            sqlite3_bind_text(stmt, <span class="number">1</span>, password.c_str(), password.size(), SQLITE_STATIC);</span><br><span class="line">            sqlite3_bind_int(stmt, <span class="number">2</span>, id);</span><br><span class="line">            <span class="keyword">if</span> (sqlite3_step(stmt) == SQLITE_DONE) &#123; <span class="comment">// because id is primary key.There is only one exist at most;</span></span><br><span class="line">                sqlite3_finalize(stmt); <span class="comment">//清理句柄</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sqlite3_finalize(stmt); <span class="comment">//清理句柄</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">modifyStatus</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> status)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> sql = <span class="string">&quot;UPDATE Users SET STATUS=? WHERE ID=?;&quot;</span>;<span class="comment">// 1 is a value that is a symbol of login status</span></span><br><span class="line">        sqlite3_stmt* stmt = <span class="literal">NULL</span>;    <span class="comment">// stmt语句句柄</span></span><br><span class="line">        <span class="keyword">int</span> result = sqlite3_prepare_v2(pDB, sql.c_str(), sql.size(), &amp;stmt, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span> (result == SQLITE_OK) &#123;</span><br><span class="line">            sqlite3_bind_int(stmt, <span class="number">1</span>, status);</span><br><span class="line">            sqlite3_bind_int(stmt,<span class="number">2</span>, id);</span><br><span class="line">            <span class="keyword">if</span> (sqlite3_step(stmt) == SQLITE_DONE) &#123; <span class="comment">// because id is primary key.There is only one exist at most;</span></span><br><span class="line">                sqlite3_finalize(stmt); <span class="comment">//清理句柄</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sqlite3_finalize(stmt); <span class="comment">//清理句柄</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">modifyCONNID</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> connid)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> sql = <span class="string">&quot;UPDATE Users SET CONNID=? WHERE ID=?;&quot;</span>;<span class="comment">// 1 is a value that is a symbol of login status</span></span><br><span class="line">        sqlite3_stmt* stmt = <span class="literal">NULL</span>;    <span class="comment">// stmt语句句柄</span></span><br><span class="line">        <span class="keyword">int</span> result = sqlite3_prepare_v2(pDB, sql.c_str(), sql.size(), &amp;stmt, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span> (result == SQLITE_OK) &#123;</span><br><span class="line">            sqlite3_bind_int(stmt, <span class="number">1</span>, connid);</span><br><span class="line">            sqlite3_bind_int(stmt, <span class="number">2</span>, id);</span><br><span class="line">            <span class="keyword">if</span> (sqlite3_step(stmt) == SQLITE_DONE) &#123; <span class="comment">// because id is primary key.There is only one exist at most;</span></span><br><span class="line">                sqlite3_finalize(stmt); <span class="comment">//清理句柄</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sqlite3_finalize(stmt); <span class="comment">//清理句柄</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">modifyRoomID</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> roomid)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> sql = <span class="string">&quot;UPDATE Users SET ROOMID=? WHERE ID=?;&quot;</span>;<span class="comment">// 1 is a value that is a symbol of login status</span></span><br><span class="line">        sqlite3_stmt* stmt = <span class="literal">NULL</span>;    <span class="comment">// stmt语句句柄</span></span><br><span class="line">        <span class="keyword">int</span> result = sqlite3_prepare_v2(pDB, sql.c_str(), sql.size(), &amp;stmt, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span> (result == SQLITE_OK) &#123;</span><br><span class="line">            sqlite3_bind_int(stmt, <span class="number">1</span>, roomid);</span><br><span class="line">            sqlite3_bind_int(stmt, <span class="number">2</span>, id);</span><br><span class="line">            <span class="keyword">if</span> (sqlite3_step(stmt) == SQLITE_DONE) &#123; <span class="comment">// because id is primary key.There is only one exist at most;</span></span><br><span class="line">                sqlite3_finalize(stmt); <span class="comment">//清理句柄</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sqlite3_finalize(stmt); <span class="comment">//清理句柄</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//roomptr must be unique or it will return false!</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">addRoom</span><span class="params">(<span class="keyword">void</span>* roomPtr)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> sql = <span class="string">&quot;INSERT INTO Rooms (RoomPtr) VALUES(?);&quot;</span>;</span><br><span class="line">        sqlite3_stmt* stmt = <span class="literal">NULL</span>;    <span class="comment">// stmt语句句柄</span></span><br><span class="line">        <span class="keyword">int</span> result = sqlite3_prepare_v2(pDB, sql.c_str(), sql.size(), &amp;stmt, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span> (result == SQLITE_OK) &#123;</span><br><span class="line">            <span class="comment">//绑定数据</span></span><br><span class="line">            sqlite3_bind_int(stmt, <span class="number">1</span>, (<span class="keyword">int</span>)roomPtr);</span><br><span class="line">            <span class="keyword">if</span> (sqlite3_step(stmt) == SQLITE_DONE) &#123;</span><br><span class="line">                sqlite3_finalize(stmt); <span class="comment">//清理句柄</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sqlite3_finalize(stmt); <span class="comment">//清理句柄</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//username must be unique or it will return false!</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">addUser</span><span class="params">(<span class="built_in">string</span> username, <span class="built_in">string</span> password)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> sql = <span class="string">&quot;INSERT INTO Users (USERNAME,PASSWORD) VALUES(?,?)&quot;</span>;</span><br><span class="line">        sqlite3_stmt* stmt = <span class="literal">NULL</span>;    <span class="comment">// stmt语句句柄</span></span><br><span class="line">        <span class="keyword">int</span> result = sqlite3_prepare_v2(pDB, sql.c_str(), sql.size(), &amp;stmt, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span> (result == SQLITE_OK) &#123;</span><br><span class="line">            <span class="comment">//绑定数据</span></span><br><span class="line">            sqlite3_bind_text(stmt, <span class="number">1</span>,username.c_str(),username.size(),SQLITE_STATIC);</span><br><span class="line">            sqlite3_bind_text(stmt, <span class="number">2</span>, password.c_str(), password.size(), SQLITE_STATIC);</span><br><span class="line">            <span class="keyword">if</span> (sqlite3_step(stmt) == SQLITE_DONE) &#123;</span><br><span class="line">                sqlite3_finalize(stmt); <span class="comment">//清理句柄</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sqlite3_finalize(stmt); <span class="comment">//清理句柄</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//true means sql is exucuted successfully. not delete successfully</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">delUser</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> sql = <span class="string">&quot;DELETE FROM Users WHERE ID=?;&quot;</span>;</span><br><span class="line">        sqlite3_stmt* stmt = <span class="literal">NULL</span>;    <span class="comment">// stmt语句句柄</span></span><br><span class="line">        <span class="keyword">int</span> result = sqlite3_prepare_v2(pDB, sql.c_str(), sql.size(), &amp;stmt, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span> (result == SQLITE_OK) &#123;</span><br><span class="line">            <span class="comment">//绑定数据</span></span><br><span class="line">            sqlite3_bind_int(stmt, <span class="number">1</span>, id);</span><br><span class="line">            <span class="keyword">if</span> (sqlite3_step(stmt) == SQLITE_DONE) &#123;</span><br><span class="line">                sqlite3_finalize(stmt); <span class="comment">//清理句柄</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sqlite3_finalize(stmt); <span class="comment">//清理句柄</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//true means sql is exucuted successfully. not delete successfully</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">delRoom</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> sql = <span class="string">&quot;DELETE FROM Rooms WHERE ID=?;&quot;</span>;</span><br><span class="line">        sqlite3_stmt* stmt = <span class="literal">NULL</span>;    <span class="comment">// stmt语句句柄</span></span><br><span class="line">        <span class="keyword">int</span> result = sqlite3_prepare_v2(pDB, sql.c_str(), sql.size(), &amp;stmt, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span> (result == SQLITE_OK) &#123;</span><br><span class="line">            <span class="comment">//绑定数据</span></span><br><span class="line">            sqlite3_bind_int(stmt, <span class="number">1</span>, id);</span><br><span class="line">            <span class="keyword">if</span> (sqlite3_step(stmt) == SQLITE_DONE) &#123;</span><br><span class="line">                sqlite3_finalize(stmt); <span class="comment">//清理句柄</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sqlite3_finalize(stmt); <span class="comment">//清理句柄</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// &quot;&quot; means failed</span></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">queryPassword</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> sql = <span class="string">&quot;SELECT PASSWORD FROM Users WHERE ID=?;&quot;</span>;</span><br><span class="line">        <span class="comment">//进行查询前的准备工作——检查语句合法性</span></span><br><span class="line">        <span class="comment">//-1代表系统会自动计算SQL语句的长度</span></span><br><span class="line">        sqlite3_stmt* stmt = <span class="literal">NULL</span>;    <span class="comment">// stmt语句句柄</span></span><br><span class="line">        <span class="keyword">int</span> result = sqlite3_prepare_v2(pDB, sql.c_str(), sql.size(), &amp;stmt, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span> (result == SQLITE_OK) &#123;</span><br><span class="line">            sqlite3_bind_int(stmt, <span class="number">1</span>, id);</span><br><span class="line">            <span class="keyword">if</span> (sqlite3_step(stmt) == SQLITE_ROW) &#123;</span><br><span class="line">                <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span>* password = sqlite3_column_text(stmt, <span class="number">0</span>);</span><br><span class="line">                <span class="function"><span class="built_in">string</span> <span class="title">ret</span><span class="params">((<span class="keyword">char</span>*)password)</span></span>;</span><br><span class="line">                sqlite3_finalize(stmt); <span class="comment">//清理句柄</span></span><br><span class="line">                <span class="keyword">return</span> ret;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sqlite3_finalize(stmt); <span class="comment">//清理句柄</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// &quot;&quot; means failed</span></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">queryUserName</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> sql = <span class="string">&quot;SELECT USERNAME FROM Users WHERE ID=?;&quot;</span>;</span><br><span class="line">        <span class="comment">//进行查询前的准备工作——检查语句合法性</span></span><br><span class="line">        <span class="comment">//-1代表系统会自动计算SQL语句的长度</span></span><br><span class="line">        sqlite3_stmt* stmt = <span class="literal">NULL</span>;    <span class="comment">// stmt语句句柄</span></span><br><span class="line">        <span class="keyword">int</span> result = sqlite3_prepare_v2(pDB, sql.c_str(), sql.size(), &amp;stmt, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span> (result == SQLITE_OK) &#123;</span><br><span class="line">            sqlite3_bind_int(stmt, <span class="number">1</span>, id);</span><br><span class="line">            <span class="keyword">if</span> (sqlite3_step(stmt) == SQLITE_ROW) &#123;</span><br><span class="line">                <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span>* username = sqlite3_column_text(stmt, <span class="number">0</span>);</span><br><span class="line">                <span class="function"><span class="built_in">string</span> <span class="title">ret</span><span class="params">((<span class="keyword">char</span>*)username)</span></span>;</span><br><span class="line">                sqlite3_finalize(stmt); <span class="comment">//清理句柄</span></span><br><span class="line">                <span class="keyword">return</span> ret;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sqlite3_finalize(stmt); <span class="comment">//清理句柄</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// -100 未加入房间 -101 未找到</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">queryRoomID</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> sql = <span class="string">&quot;SELECT ROOMID FROM Users WHERE ID=?;&quot;</span>;</span><br><span class="line">        <span class="comment">//进行查询前的准备工作——检查语句合法性</span></span><br><span class="line">        <span class="comment">//-1代表系统会自动计算SQL语句的长度</span></span><br><span class="line">        sqlite3_stmt* stmt = <span class="literal">NULL</span>;    <span class="comment">// stmt语句句柄</span></span><br><span class="line">        <span class="keyword">int</span> result = sqlite3_prepare_v2(pDB, sql.c_str(), sql.size(), &amp;stmt, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span> (result == SQLITE_OK) &#123;</span><br><span class="line">            sqlite3_bind_int(stmt, <span class="number">1</span>, id);</span><br><span class="line">            <span class="keyword">if</span> (sqlite3_step(stmt) == SQLITE_ROW) &#123;</span><br><span class="line">                <span class="keyword">int</span> RoomID = sqlite3_column_int(stmt, <span class="number">0</span>);</span><br><span class="line">                sqlite3_finalize(stmt); <span class="comment">//清理句柄</span></span><br><span class="line">                <span class="keyword">return</span> RoomID;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sqlite3_finalize(stmt); <span class="comment">//清理句柄</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-101</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// -101 未找到</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">queryUserID</span><span class="params">(<span class="built_in">string</span> username)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> sql = <span class="string">&quot;SELECT ID FROM Users WHERE USERNAME=?;&quot;</span>;</span><br><span class="line">        <span class="comment">//进行查询前的准备工作——检查语句合法性</span></span><br><span class="line">        <span class="comment">//-1代表系统会自动计算SQL语句的长度</span></span><br><span class="line">        sqlite3_stmt* stmt = <span class="literal">NULL</span>;    <span class="comment">// stmt语句句柄</span></span><br><span class="line">        <span class="keyword">int</span> result = sqlite3_prepare_v2(pDB, sql.c_str(), sql.size(), &amp;stmt, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span> (result == SQLITE_OK) &#123;</span><br><span class="line">            sqlite3_bind_text(stmt, <span class="number">1</span>, username.c_str(),username.size(),SQLITE_STATIC);</span><br><span class="line">            <span class="keyword">if</span> (sqlite3_step(stmt) == SQLITE_ROW) &#123;</span><br><span class="line">                <span class="keyword">int</span> UserID = sqlite3_column_int(stmt, <span class="number">0</span>);</span><br><span class="line">                sqlite3_finalize(stmt); <span class="comment">//清理句柄</span></span><br><span class="line">                <span class="keyword">return</span> UserID;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sqlite3_finalize(stmt); <span class="comment">//清理句柄</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-101</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 0 default(未登录) -101未找到</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">queryUserStatus</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> sql = <span class="string">&quot;SELECT STATUS FROM Users WHERE ID=?;&quot;</span>;</span><br><span class="line">        <span class="comment">//进行查询前的准备工作——检查语句合法性</span></span><br><span class="line">        <span class="comment">//-1代表系统会自动计算SQL语句的长度</span></span><br><span class="line">        sqlite3_stmt* stmt = <span class="literal">NULL</span>;    <span class="comment">// stmt语句句柄</span></span><br><span class="line">        <span class="keyword">int</span> result = sqlite3_prepare_v2(pDB, sql.c_str(), sql.size(), &amp;stmt, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span> (result == SQLITE_OK) &#123;</span><br><span class="line">            sqlite3_bind_int(stmt, <span class="number">1</span>, id);</span><br><span class="line">            <span class="keyword">if</span> (sqlite3_step(stmt) == SQLITE_ROW) &#123;</span><br><span class="line">                <span class="keyword">int</span> status = sqlite3_column_int(stmt, <span class="number">0</span>);</span><br><span class="line">                sqlite3_finalize(stmt); <span class="comment">//清理句柄</span></span><br><span class="line">                <span class="keyword">return</span> status;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sqlite3_finalize(stmt); <span class="comment">//清理句柄</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-101</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//-100 未登录 -101未找到</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">queryUserCONNID</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> sql = <span class="string">&quot;SELECT CONNID FROM Users WHERE ID=?;&quot;</span>;</span><br><span class="line">        <span class="comment">//进行查询前的准备工作——检查语句合法性</span></span><br><span class="line">        <span class="comment">//-1代表系统会自动计算SQL语句的长度</span></span><br><span class="line">        sqlite3_stmt* stmt = <span class="literal">NULL</span>;    <span class="comment">// stmt语句句柄</span></span><br><span class="line">        <span class="keyword">int</span> result = sqlite3_prepare_v2(pDB, sql.c_str(), sql.size(), &amp;stmt, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span> (result == SQLITE_OK) &#123;</span><br><span class="line">            sqlite3_bind_int(stmt, <span class="number">1</span>, id);</span><br><span class="line">            <span class="keyword">if</span> (sqlite3_step(stmt) == SQLITE_ROW) &#123;</span><br><span class="line">                <span class="keyword">int</span> CONNID = sqlite3_column_int(stmt, <span class="number">0</span>);</span><br><span class="line">                sqlite3_finalize(stmt); <span class="comment">//清理句柄</span></span><br><span class="line">                <span class="keyword">return</span> CONNID;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sqlite3_finalize(stmt); <span class="comment">//清理句柄</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-101</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//nullptr 未找到或未初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span>* <span class="title">queryRoomPtr</span><span class="params">(<span class="keyword">int</span> roomID)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> sql = <span class="string">&quot;SELECT RoomPtr FROM Rooms WHERE ID=?;&quot;</span>;</span><br><span class="line">        <span class="comment">//进行查询前的准备工作——检查语句合法性</span></span><br><span class="line">        <span class="comment">//-1代表系统会自动计算SQL语句的长度</span></span><br><span class="line">        sqlite3_stmt* stmt = <span class="literal">NULL</span>;    <span class="comment">// stmt语句句柄</span></span><br><span class="line">        <span class="keyword">int</span> result = sqlite3_prepare_v2(pDB, sql.c_str(), sql.size(), &amp;stmt, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span> (result == SQLITE_OK) &#123;</span><br><span class="line">            sqlite3_bind_int(stmt, <span class="number">1</span>, roomID);</span><br><span class="line">            <span class="keyword">if</span> (sqlite3_step(stmt) == SQLITE_ROW) &#123;</span><br><span class="line">                <span class="keyword">void</span>* RoomPtr = (<span class="keyword">void</span>*)sqlite3_column_int(stmt, <span class="number">0</span>);</span><br><span class="line">                sqlite3_finalize(stmt); <span class="comment">//清理句柄</span></span><br><span class="line">                <span class="keyword">return</span> RoomPtr;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sqlite3_finalize(stmt); <span class="comment">//清理句柄</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//-1 未找到</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">queryRoomIDByPtr</span><span class="params">(<span class="keyword">void</span>* RoomPtr)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> sql = <span class="string">&quot;SELECT ID FROM Rooms WHERE RoomPtr=?;&quot;</span>;</span><br><span class="line">        <span class="comment">//进行查询前的准备工作——检查语句合法性</span></span><br><span class="line">        <span class="comment">//-1代表系统会自动计算SQL语句的长度</span></span><br><span class="line">        sqlite3_stmt* stmt = <span class="literal">NULL</span>;    <span class="comment">// stmt语句句柄</span></span><br><span class="line">        <span class="keyword">int</span> result = sqlite3_prepare_v2(pDB, sql.c_str(), sql.size(), &amp;stmt, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span> (result == SQLITE_OK) &#123;</span><br><span class="line">            sqlite3_bind_int(stmt, <span class="number">1</span>, (<span class="keyword">int</span>)RoomPtr);</span><br><span class="line">            <span class="keyword">if</span> (sqlite3_step(stmt) == SQLITE_ROW) &#123;</span><br><span class="line">                <span class="keyword">int</span> RoomID = sqlite3_column_int(stmt, <span class="number">0</span>);</span><br><span class="line">                sqlite3_finalize(stmt); <span class="comment">//清理句柄</span></span><br><span class="line">                <span class="keyword">return</span> RoomID;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sqlite3_finalize(stmt); <span class="comment">//清理句柄</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">sqlite3* pDB = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="调用测试"><a href="#调用测试" class="headerlink" title="调用测试"></a>调用测试</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SqliteTest.cpp : 此文件包含 &quot;main&quot; 函数。程序执行将在此处开始并结束。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;sqlite3.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sqlite3.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;GameData.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">GameData <span class="title">gamedata</span><span class="params">(<span class="string">&quot;Game.db&quot;</span>)</span></span>;</span><br><span class="line">    <span class="built_in">string</span> username;</span><br><span class="line">    <span class="built_in">string</span> password;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;用户名:&quot;</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; username;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;密码:&quot;</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; password;</span><br><span class="line">    <span class="keyword">int</span> id = <span class="number">-999</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt; (gamedata.checkPassword(username, password,id) ? <span class="string">&quot;登录成功&quot;</span> : <span class="string">&quot;登录失败&quot;</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">if</span> (id != <span class="number">-999</span>) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;[UserInfo]ID:&quot;</span> &lt;&lt;id&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt; (gamedata.modifyStatus(id,<span class="number">1</span>) ? <span class="string">&quot;修改状态成功&quot;</span> : <span class="string">&quot;修改状态失败&quot;</span>) &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; (gamedata.modifyPassword(id, <span class="string">&quot;erfdv&#x27;&quot;</span>, <span class="string">&quot;hurrison&quot;</span>) ? <span class="string">&quot;修改密码成功&quot;</span> : <span class="string">&quot;修改密码失败&quot;</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;当前密码:&quot;</span>&lt;&lt;gamedata.queryPassword(id)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; (gamedata.addRoom(<span class="literal">nullptr</span>) ? <span class="string">&quot;增加房间成功&quot;</span> : <span class="string">&quot;增加房间失败&quot;</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; (gamedata.addUser(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;test&quot;</span>) ? <span class="string">&quot;增加用户成功&quot;</span> : <span class="string">&quot;增加用户失败&quot;</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;新增用户ID:&quot;</span> &lt;&lt; gamedata.queryUserID(<span class="string">&quot;test&quot;</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;新增用户名:&quot;</span> &lt;&lt; gamedata.queryUserName(gamedata.queryUserID(<span class="string">&quot;test&quot;</span>)) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; (gamedata.delUser(gamedata.queryUserID(<span class="string">&quot;test&quot;</span>)) ? <span class="string">&quot;删除新增用户成功&quot;</span> : <span class="string">&quot;删除新增用户失败&quot;</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;新增房间ID:&quot;</span> &lt;&lt; gamedata.queryRoomIDByPtr(<span class="literal">nullptr</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;新增房间指针:&quot;</span> &lt;&lt; (<span class="keyword">int</span>)<span class="literal">nullptr</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; (gamedata.delRoom(gamedata.queryRoomIDByPtr(<span class="literal">nullptr</span>)) ? <span class="string">&quot;删除房间成功&quot;</span> : <span class="string">&quot;删除房间失败&quot;</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> SQLite </tag>
            
            <tag> 增删查改 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>智能去水印软件-Inpaint</title>
      <link href="posts/5210.html"/>
      <url>posts/5210.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="软件截图"><a href="#软件截图" class="headerlink" title="软件截图"></a>软件截图</h2><p><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://hurrisonx.gitee.io/pic/2020/19.jpg" alt="图片无法显示"></p><h2 id="软件介绍"><a href="#软件介绍" class="headerlink" title="软件介绍"></a>软件介绍</h2><p>Inpaint 是一款可以从图片上去除不必要的物体，让您轻松摆脱照片上的水印、划痕、污渍、标志等瑕疵的实用型软件；简单说来，Inpaint 就是一款强大实用的图片去水印软件，您的图片中不想要的部分，如额外的线、人物、文字等,选定后Inpaint都会帮你全自动进行擦除，同时Inpaint<strong>会根据附近图片区域重建擦除的区域，使看起来完美无暇，没有痕迹</strong>。</p><h2 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h2><a class="btn-beautify button--animated purple larger" href="https://www.lanzous.com/i9mzgyb"   title="蓝奏云下载"><i class="fas fa-cloud-download-alt fa-fw"></i><span>蓝奏云下载</span></a>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Inpaint </tag>
            
            <tag> 去水印 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则调试软件-RegexBuddy 4(已付费零售版)</title>
      <link href="posts/18638.html"/>
      <url>posts/18638.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="软件截图"><a href="#软件截图" class="headerlink" title="软件截图"></a>软件截图</h2><p><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://hurrisonx.gitee.io/pic/2020/18.webp" alt="图片无法显示"></p><h2 id="软件介绍"><a href="#软件介绍" class="headerlink" title="软件介绍"></a>软件介绍</h2><p>RegexBuddy是您使用正则表达式的完美伴侣。轻松创建与所需内容完全匹配的正则表达式。清楚地了解其他人编写的复杂正则表达式。快速测试样本字符串和文件上的任何正则表达式，防止实际数据出错。通过逐步执行实际的匹配过程来进行调试，而无需猜测。将正则表达式与源代码段一起使用，这些源代码段会根据您的编程语言的具体情况自动调整。收集并记录正则表达式库，以备将来重用。通过文件和文件夹进行GREP（搜索和替换）。整合 RegexBuddy带有您喜欢的搜索和编辑工具，可立即访问。</p><p>并且 RegexBuddy 可以在你的自动地调整为 C#, VB.NET, Java, C, C++, Delphi, Perl, PHP, Python, Javas cript 和 Ruby 特殊细节的带有代码摘录的源代码当中使用 Regex。</p><h2 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h2><a class="btn-beautify button--animated purple larger" href="https://www.lanzous.com/i9mzzyf"   title="蓝奏云下载"><i class="fas fa-cloud-download-alt fa-fw"></i><span>蓝奏云下载</span></a> 密码:chtg ]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RegexBuddy </tag>
            
            <tag> 已付费零售版 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>围棋UI-Sabaki安装步骤</title>
      <link href="posts/45220.html"/>
      <url>posts/45220.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>1.下载Sabaki中文版(<a href="https://www.hurrison.com/go/?url=https://github.com/xsaxy/Sabaki-zh-CN/releases">传送门</a>)</li><li>2.打开安装程序安装</li><li>3.下载leela-zero等ai引擎</li><li>4.配置引擎 + 参数</li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sabaki </tag>
            
            <tag> 围棋 </tag>
            
            <tag> 棋谱 </tag>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>弈城围棋棋谱转换器</title>
      <link href="posts/45951.html"/>
      <url>posts/45951.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>发现很多围棋软件不支持弈城围棋的gib棋谱，但全部支持sgf格式的棋谱，所以写了这个转换器</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>首先分析弈城围棋棋谱格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">\HS</span><br><span class="line">\[GIBOKIND&#x3D;China\]</span><br><span class="line">\[TYPE&#x3D;0\]</span><br><span class="line">\[SZAUDIO&#x3D;0\]</span><br><span class="line">\[GAMECONDITION&#x3D;分先 : 黑贴 6目半\]</span><br><span class="line">\[GAMETIME&#x3D;限制时间 20分</span><br><span class="line">30秒 读秒 3番\]</span><br><span class="line">\[GAMERESULT&#x3D;白 中盘胜\]</span><br><span class="line">\[GAMEZIPSU&#x3D;0\]</span><br><span class="line">\[GAMEDUM&#x3D;0\]</span><br><span class="line">\[GAMEGONGJE&#x3D;65\]</span><br><span class="line">\[GAMETOTALNUM&#x3D;11\]</span><br><span class="line">\[GAMENAME&#x3D;升降级对局\]</span><br><span class="line">\[GAMEDATE&#x3D;2019- 8-20-17-40-21\]</span><br><span class="line">\[GAMEPLACE&#x3D;弈城围棋\]</span><br><span class="line">\[GAMELECNAME&#x3D;\]</span><br><span class="line">\[GAMEWHITENAME&#x3D;ihaen (5段)\]</span><br><span class="line">\[GAMEWHITELEVEL&#x3D;22\]</span><br><span class="line">\[GAMEWHITENICK&#x3D;ZAEFDUL\]</span><br><span class="line">\[GAMEWHITECOUNTRY&#x3D;2\]</span><br><span class="line">\[GAMEWAVATA&#x3D;0\]</span><br><span class="line">\[GAMEWIMAGE&#x3D;http:&#x2F;&#x2F;images.eweiqi.com&#x2F;&#x2F;wuser&#x2F;5&#x2F;355&#x2F;745&#x2F;photo&#x2F;thumbs&#x2F;tu000_5355745.jpg\]</span><br><span class="line">\[GAMEBLACKNAME&#x3D;joker001 (5段)\]</span><br><span class="line">\[GAMEBLACKLEVEL&#x3D;22\]</span><br><span class="line">\[GAMEBLACKNICK&#x3D;joker001\]</span><br><span class="line">\[GAMEBLACKCOUNTRY&#x3D;2\]</span><br><span class="line">\[GAMEBAVATA&#x3D;60001\]</span><br><span class="line">\[GAMEBIMAGE&#x3D;\]</span><br><span class="line">\[GAMECOMMENT&#x3D;\]</span><br><span class="line">\[GAMEINFOMAIN&#x3D;GBKIND:2,GTYPE:0,GCDT:0,GTIME:1200-30-3,GRLT:4,ZIPSU:0,DUM:0,GONGJE:65,TCNT:11,AUSZ:0\]</span><br><span class="line">\[GAMEINFOSUB&#x3D;GNAMEF:0,GPLCF:0,GNAME:升降级对局,GDATE:2019- 8-20-17-40-21,GPLC:弈城围棋,GCMT:\]</span><br><span class="line">\[WUSERINFO&#x3D;WID:9,WLV:22,WNICK:ZAEFDUL,WNCD:2,WAID:0,WIMG:http:&#x2F;&#x2F;images.eweiqi.com&#x2F;&#x2F;wuser&#x2F;5&#x2F;355&#x2F;745&#x2F;photo&#x2F;thumbs&#x2F;tu000_5355745.jpg\]</span><br><span class="line">\[BUSERINFO&#x3D;BID:joker001,BLV:22,BNICK:joker001,BNCD:2,BAID:60001,BIMG:\]</span><br><span class="line">\[GAMETAG&#x3D;S0,R0,D0,G65,W4,Z0,T30-3-1200,C2019:08:20:17:40,I:ihaen,L:22,M:joker001,N:22,A:ZAEFDUL,B:joker001,J:2,K:2\]</span><br><span class="line">\HE</span><br><span class="line">\GS</span><br><span class="line">2 1 0</span><br><span class="line">12 0 &amp;4</span><br><span class="line">INI 0 1 0 &amp;4 </span><br><span class="line">STO 0 2 1 15 3 </span><br><span class="line">STO 0 3 2 3 3 </span><br><span class="line">STO 0 4 1 15 16 </span><br><span class="line">STO 0 5 2 3 16 </span><br><span class="line">STO 0 6 1 16 10 </span><br><span class="line">STO 0 7 2 3 9 </span><br><span class="line">STO 0 8 1 5 2 </span><br><span class="line">STO 0 9 2 9 15 </span><br><span class="line">STO 0 10 1 9 3 </span><br><span class="line">STO 0 11 2 2 14 </span><br><span class="line">STO 0 12 1 15 14 </span><br><span class="line">\GE</span><br></pre></td></tr></table></figure><p>发现STO 即为Stone缩写(棋子) 以[STO 0 2 1 15 3]为例，2为步数(-1),1表示黑棋[1/黑 2/白] 15和3为坐标，这就显然了</p><p>sgf格式分析不做赘述自行百度</p><h2 id="使用C-编写转换器"><a href="#使用C-编写转换器" class="headerlink" title="使用C#编写转换器"></a>使用C#编写转换器</h2><h3 id="1-编写"><a href="#1-编写" class="headerlink" title="1.编写"></a>1.编写</h3><p>转换器代码如下:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.InteropServices;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Windows;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">gib2sgf</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">DllImport(<span class="meta-string">&quot;user32.dll&quot;</span>, EntryPoint = <span class="meta-string">&quot;ShowWindow&quot;</span>, SetLastError = true)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">bool</span> <span class="title">ShowWindow</span>(<span class="params">IntPtr hWnd, uint nCmdShow</span>)</span>;</span><br><span class="line">        [<span class="meta">DllImport(<span class="meta-string">&quot;user32.dll&quot;</span>, EntryPoint = <span class="meta-string">&quot;FindWindow&quot;</span>, SetLastError = true)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> IntPtr <span class="title">FindWindow</span>(<span class="params"><span class="built_in">string</span> lpClassName, <span class="built_in">string</span> lpWindowName</span>)</span>;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.Title = <span class="string">&quot;[Legendary]-flag&quot;</span>;</span><br><span class="line">            IntPtr intptr = FindWindow(<span class="string">&quot;ConsoleWindowClass&quot;</span>, <span class="string">&quot;[Legendary]-flag&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (intptr != IntPtr.Zero)</span><br><span class="line">            &#123;</span><br><span class="line">                ShowWindow(intptr, <span class="number">0</span>);<span class="comment">//隐藏控制台窗口</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (args.Length &lt; <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                MessageBox.Show(<span class="string">&quot;请拖入要转换的弈城围棋棋谱!&quot;</span>, <span class="string">&quot;信息:&quot;</span>, MessageBoxButton.OK, MessageBoxImage.Error);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!File.Exists(args[<span class="number">0</span>]))</span><br><span class="line">            &#123;</span><br><span class="line">                MessageBox.Show(<span class="string">&quot;请拖入要转换的弈城围棋棋谱!&quot;</span>, <span class="string">&quot;信息:&quot;</span>, MessageBoxButton.OK, MessageBoxImage.Error);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (Path.GetExtension(args[<span class="number">0</span>]) != <span class="string">&quot;.gib&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                MessageBox.Show(<span class="string">&quot;仅支持转换弈城围棋棋谱!&quot;</span>, <span class="string">&quot;信息:&quot;</span>, MessageBoxButton.OK, MessageBoxImage.Error);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">string</span> input = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                input = File.ReadAllText(args[<span class="number">0</span>], Encoding.GetEncoding(<span class="string">&quot;GB2312&quot;</span>)); <span class="comment">//要加编码否则乱码</span></span><br><span class="line">            &#125;</span><br><span class="line">            catch (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                MessageBox.Show(<span class="string">&quot;读入文件失败!\n详细:\n&quot;</span>+e.Message, <span class="string">&quot;信息:&quot;</span>, MessageBoxButton.OK, MessageBoxImage.Error);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">           </span><br><span class="line">            <span class="keyword">if</span> (input.Substring(<span class="number">0</span>, <span class="number">3</span>) != <span class="string">&quot;\\HS&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                MessageBox.Show(<span class="string">&quot;仅支持转换弈城围棋棋谱!&quot;</span>, <span class="string">&quot;信息:&quot;</span>, MessageBoxButton.OK, MessageBoxImage.Error);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">string</span> output_path = Path.GetDirectoryName(args[<span class="number">0</span>]);</span><br><span class="line">            output_path += <span class="string">&quot;\\&quot;</span>;</span><br><span class="line">            output_path += <span class="string">&quot;已转换_&quot;</span> + Path.GetFileNameWithoutExtension(args[<span class="number">0</span>]) + <span class="string">&quot;.sgf&quot;</span>;</span><br><span class="line">            processor(input, output_path);</span><br><span class="line">            MessageBoxResult result = MessageBox.Show(<span class="string">&quot;转换完成!\n保存路径:&quot;</span> + output_path + <span class="string">&quot;\n点击确定定位已转换文件位置。&quot;</span>, <span class="string">&quot;信息[眉山少儿围棋俱乐部 电话:18990309935]:&quot;</span>, MessageBoxButton.OKCancel, MessageBoxImage.Information);</span><br><span class="line">            <span class="keyword">if</span>(result == MessageBoxResult.OK)</span><br><span class="line">            &#123;</span><br><span class="line">                OpenFolderAndSelectFile(output_path);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">processor</span>(<span class="params"><span class="built_in">string</span> input_alltext, <span class="built_in">string</span> path</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//获取名字</span></span><br><span class="line">            <span class="built_in">string</span> GameWhiteName = getCenterText(<span class="string">&quot;\\[GAMEWHITENAME=&quot;</span>, <span class="string">&quot;\\]&quot;</span>, input_alltext);</span><br><span class="line">            <span class="built_in">string</span> GameBlackName = getCenterText(<span class="string">&quot;\\[GAMEBLACKNAME=&quot;</span>, <span class="string">&quot;\\]&quot;</span>, input_alltext);</span><br><span class="line">            <span class="comment">//定义</span></span><br><span class="line">            <span class="built_in">string</span> output = <span class="string">&quot;(;GM[1]FF[4]AP[Zenith:7.0]SZ[19]HA[0]KM[6.5]CA[UTF-8]PB[#Replace_BlackName#]BR[]PW[#Replace_WhiteName#]WR[] ZT[15]DT[2020 - 01 - 31]RE[];&quot;</span>;</span><br><span class="line">            output = output.Replace(<span class="string">&quot;#Replace_BlackName#&quot;</span>, GameBlackName).Replace(<span class="string">&quot;#Replace_WhiteName#&quot;</span>,GameWhiteName);</span><br><span class="line">            <span class="built_in">string</span> header_black = <span class="string">&quot;B[&quot;</span>;</span><br><span class="line">            <span class="built_in">string</span> footer_black = <span class="string">&quot;];&quot;</span>;</span><br><span class="line">            <span class="built_in">string</span> header_white = <span class="string">&quot;W[&quot;</span>;</span><br><span class="line">            <span class="built_in">string</span> footer_white = <span class="string">&quot;];&quot;</span>;</span><br><span class="line">            <span class="built_in">string</span>[] letter_map = <span class="keyword">new</span> <span class="built_in">string</span>[] &#123; <span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>,<span class="string">&quot;e&quot;</span>,<span class="string">&quot;f&quot;</span>,<span class="string">&quot;g&quot;</span>,<span class="string">&quot;h&quot;</span>,<span class="string">&quot;i&quot;</span>,<span class="string">&quot;j&quot;</span>,<span class="string">&quot;k&quot;</span>,<span class="string">&quot;l&quot;</span>,<span class="string">&quot;m&quot;</span>,<span class="string">&quot;n&quot;</span>,<span class="string">&quot;o&quot;</span>,<span class="string">&quot;p&quot;</span>,<span class="string">&quot;q&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="string">&quot;s&quot;</span>,<span class="string">&quot;t&quot;</span>,<span class="string">&quot;u&quot;</span>,<span class="string">&quot;v&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="string">&quot;x&quot;</span>,<span class="string">&quot;y&quot;</span>,<span class="string">&quot;z&quot;</span>&#125;;</span><br><span class="line">            <span class="built_in">string</span>[] input = input_alltext.Split(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; input.Length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">string</span>[] sub_array = input[i].Split(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">                <span class="keyword">if</span> (sub_array[<span class="number">0</span>] != <span class="string">&quot;STO&quot;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">int</span> who = <span class="built_in">int</span>.Parse(sub_array[<span class="number">3</span>]); <span class="comment">//1 black 2 white</span></span><br><span class="line">                <span class="built_in">int</span> where_x = <span class="built_in">int</span>.Parse(sub_array[<span class="number">4</span>]); <span class="comment">// start from 0</span></span><br><span class="line">                <span class="built_in">int</span> where_y = <span class="built_in">int</span>.Parse(sub_array[<span class="number">5</span>]); <span class="comment">// start from 0</span></span><br><span class="line">                <span class="keyword">if</span> (who == <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    output += header_black;</span><br><span class="line">                    output += letter_map[where_x];</span><br><span class="line">                    output += letter_map[where_y];</span><br><span class="line">                    output += footer_black;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (who == <span class="number">2</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    output += header_white;</span><br><span class="line">                    output += letter_map[where_x];</span><br><span class="line">                    output += letter_map[where_y];</span><br><span class="line">                    output += footer_white;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            output = output.Substring(<span class="number">0</span>, output.Length - <span class="number">1</span>);</span><br><span class="line">            output += <span class="string">&quot;)&quot;</span>; <span class="comment">//添加结束标记</span></span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                File.WriteAllText(path, output, Encoding.UTF8); <span class="comment">//写入文件</span></span><br><span class="line">            &#125;</span><br><span class="line">            catch (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                MessageBox.Show(<span class="string">&quot;写入文件失败!\n详细:\n&quot;</span> + e.Message, <span class="string">&quot;信息:&quot;</span>, MessageBoxButton.OK, MessageBoxImage.Error);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OpenFolderAndSelectFile</span>(<span class="params">String fileFullName</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            System.Diagnostics.ProcessStartInfo psi = <span class="keyword">new</span> System.Diagnostics.ProcessStartInfo(<span class="string">&quot;Explorer.exe&quot;</span>);</span><br><span class="line">            psi.Arguments = <span class="string">&quot;/e,/select,&quot;</span> + fileFullName;</span><br><span class="line">            System.Diagnostics.Process.Start(psi);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span><span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span>取出文本中间内容</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span><span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span><span class="doctag">&lt;param name=&quot;left&quot;&gt;</span>左边文本<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span><span class="doctag">&lt;param name=&quot;right&quot;&gt;</span>右边文本<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span><span class="doctag">&lt;param name=&quot;text&quot;&gt;</span>全文本<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span><span class="doctag">&lt;return&gt;</span>完事返回成功文本|没有找到返回空<span class="doctag">&lt;/return&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">getCenterText</span>(<span class="params"><span class="built_in">string</span> left, <span class="built_in">string</span> right, <span class="built_in">string</span> text</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//判断是否为null或者是empty</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(left))</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(right))</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(text))</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="comment">//判断是否为null或者是empty</span></span><br><span class="line"></span><br><span class="line">            <span class="built_in">int</span> Lindex = text.IndexOf(left); <span class="comment">//搜索left的位置</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (Lindex == <span class="number">-1</span>)</span><br><span class="line">            &#123; <span class="comment">//判断是否找到left</span></span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Lindex = Lindex + left.Length; <span class="comment">//取出left右边文本起始位置</span></span><br><span class="line"></span><br><span class="line">            <span class="built_in">int</span> Rindex = text.IndexOf(right, Lindex);<span class="comment">//从left的右边开始寻找right</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (Rindex == <span class="number">-1</span>)</span><br><span class="line">            &#123;<span class="comment">//判断是否找到right</span></span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> text.Substring(Lindex, Rindex - Lindex);<span class="comment">//返回查找到的文本</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h3><p>C# 命令行程序，可自行编译，也可下载我的成品，见下文。</p><p>使用方法:</p><p>将弈城围棋棋谱拖到编译好的转换器图标上面，即可</p><h2 id="成品"><a href="#成品" class="headerlink" title="成品"></a>成品</h2><a class="btn-beautify button--animated purple larger" href="https://www.lanzous.com/i8znm2f"   title="蓝奏云下载"><i class="fas fa-cloud-download-alt fa-fw"></i><span>蓝奏云下载</span></a>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 围棋 </tag>
            
            <tag> 棋谱 </tag>
            
            <tag> 弈城围棋 </tag>
            
            <tag> 转换器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gif录制软件-ScreenToGifV2.2</title>
      <link href="posts/15129.html"/>
      <url>posts/15129.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="软件截图"><a href="#软件截图" class="headerlink" title="软件截图"></a>软件截图</h2><p><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://hurrisonx.gitee.io/pic/2020/10.webp" alt="图片无法显示"></p><p><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://hurrisonx.gitee.io/pic/2020/22.webp" alt="图片无法显示"></p><h2 id="软件介绍"><a href="#软件介绍" class="headerlink" title="软件介绍"></a>软件介绍</h2><p>Screen to Gif是一款方便可靠的gif动画录制软件，可以用来快速录制屏幕上的指定区域，将其直接保存为GIF动画文件，十分好用，推荐下载使用。</p><p>它不仅可以录制屏幕，同时也包含了摄像头录制，白板书写录制等功能，并且在录制后，可以对录制内容进行增删、修改、压缩等处理。ScreenToGif是一款国外免费开源小巧实用的Gif动画录制工具，使用该软件可以将屏幕任何区域及操作过程录制成GIF格式的动画图像，保存过程还可以对GIF动画进行编辑优化。也可以自由地移动捕获帧录制视频上的 web 页或屏幕活动在您的桌面上。捕获可以暂停和恢复，一旦你完成录制，程序带来了一种简单的编辑器，允许您预览记录和删除任何不必要的帧。这款非常优秀的工具原生单执行文件，界面非常简单，功能很实用，它具有录制屏幕、录制摄像头、录制画板、编辑器等功能，编辑器功能非常强大，支持自定义Gif循环播放次数，哪些画面不要的话，还可以对个别删除掉，相当简单且方便！</p><p>注意:软件运行需要 <strong>.Net Framework 4.8 (or above)</strong></p><h2 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h2><ol><li><a class="btn-beautify button--animated purple larger" href="https://github.com/NickeManarin/ScreenToGif/releases"   title="Github下载"><i class="fab fa-github-square fa-fw"></i><span>Github下载</span></a></li><li><a class="btn-beautify button--animated purple larger" href="https://www.lanzous.com/i8wljhc"   title="蓝奏云下载(V2.20 Portable)"><i class="fas fa-cloud-download-alt fa-fw"></i><span>蓝奏云下载(V2.20 Portable)</span></a> 下载密码:screen</li></ol>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gif </tag>
            
            <tag> ScreenToGif </tag>
            
            <tag> 动图 </tag>
            
            <tag> 录屏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ Base64实现</title>
      <link href="posts/64987.html"/>
      <url>posts/64987.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Base介绍"><a href="#Base介绍" class="headerlink" title="Base介绍"></a>Base介绍</h2><p>Base64是网络上最常见的用于传输8Bit字节码的编码方式之一，Base64就是一种基于64个可打印字符来表示二进制数据的方法。可查看RFC2045～RFC2049，上面有MIME的详细规范。<br>Base64编码是从二进制到字符的过程，可用于在HTTP环境下传递较长的标识信息。采用Base64编码具有不可读性，需要解码后才能阅读。<br>Base64由于以上优点被广泛应用于计算机的各个领域，然而由于输出内容中包括两个以上“符号类”字符（+, /, =)，不同的应用场景又分别研制了Base64的各种“变种”</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight c++"><figcaption><span>base64.h</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base64</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">encode</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; strString)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">encode</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* pszSource,<span class="keyword">int</span> nLen)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">decode</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; strString)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">decode</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; strString,<span class="keyword">int</span>&amp; outLen)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>base64.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;base64.h&quot;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* enkey = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dekey[] = &#123;</span><br><span class="line"><span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>,</span><br><span class="line"><span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>,</span><br><span class="line"><span class="number">62</span>, <span class="comment">// &#x27;+&#x27;</span></span><br><span class="line"><span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>,</span><br><span class="line"><span class="number">63</span>, <span class="comment">// &#x27;/&#x27;</span></span><br><span class="line"><span class="number">52</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">56</span>, <span class="number">57</span>, <span class="number">58</span>, <span class="number">59</span>, <span class="number">60</span>, <span class="number">61</span>, <span class="comment">// &#x27;0&#x27;-&#x27;9&#x27;</span></span><br><span class="line"><span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>,</span><br><span class="line"><span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>,</span><br><span class="line"><span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="comment">// &#x27;A&#x27;-&#x27;Z&#x27;</span></span><br><span class="line"><span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>,</span><br><span class="line"><span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>,</span><br><span class="line"><span class="number">39</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="comment">// &#x27;a&#x27;-&#x27;z&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">Base64::encode</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; strString)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> nByteSrc = strString.length();</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> pszSource = strString;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i; i &lt; nByteSrc; i++)</span><br><span class="line"><span class="keyword">if</span> (pszSource[i] &lt; <span class="number">0</span> || pszSource[i] &gt; <span class="number">127</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;can not encode Non-ASCII characters&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">pszEncode</span><span class="params">(nByteSrc * <span class="number">4</span> / <span class="number">3</span> + <span class="number">4</span>, <span class="string">&#x27;\0&#x27;</span>)</span></span>;</span><br><span class="line"><span class="keyword">int</span> nLoop = nByteSrc % <span class="number">3</span> == <span class="number">0</span> ? nByteSrc : nByteSrc - <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nLoop; i += <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">pszEncode[n] = enkey[pszSource[i] &gt;&gt; <span class="number">2</span>];</span><br><span class="line">pszEncode[n + <span class="number">1</span>] = enkey[((pszSource[i] &amp; <span class="number">3</span>) &lt;&lt; <span class="number">4</span>) | ((pszSource[i + <span class="number">1</span>] &amp; <span class="number">0xF0</span>) &gt;&gt; <span class="number">4</span>)];</span><br><span class="line">pszEncode[n + <span class="number">2</span>] = enkey[((pszSource[i + <span class="number">1</span>] &amp; <span class="number">0x0f</span>) &lt;&lt; <span class="number">2</span>) | ((pszSource[i + <span class="number">2</span>] &amp; <span class="number">0xc0</span>) &gt;&gt; <span class="number">6</span>)];</span><br><span class="line">pszEncode[n + <span class="number">3</span>] = enkey[pszSource[i + <span class="number">2</span>] &amp; <span class="number">0x3F</span>];</span><br><span class="line">n += <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (nByteSrc % <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">pszEncode[n] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">pszEncode[n] = enkey[pszSource[i] &gt;&gt; <span class="number">2</span>];</span><br><span class="line">pszEncode[n + <span class="number">1</span>] = enkey[((pszSource[i] &amp; <span class="number">3</span>) &lt;&lt; <span class="number">4</span>) | ((<span class="number">0</span> &amp; <span class="number">0xf0</span>) &gt;&gt; <span class="number">4</span>)];</span><br><span class="line">pszEncode[n + <span class="number">2</span>] = <span class="string">&#x27;=&#x27;</span>;</span><br><span class="line">pszEncode[n + <span class="number">3</span>] = <span class="string">&#x27;=&#x27;</span>;</span><br><span class="line">pszEncode[n + <span class="number">4</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">pszEncode[n] = enkey[pszSource[i] &gt;&gt; <span class="number">2</span>];</span><br><span class="line">pszEncode[n + <span class="number">1</span>] = enkey[((pszSource[i] &amp; <span class="number">3</span>) &lt;&lt; <span class="number">4</span>) | ((pszSource[i + <span class="number">1</span>] &amp; <span class="number">0xf0</span>) &gt;&gt; <span class="number">4</span>)];</span><br><span class="line">pszEncode[n + <span class="number">2</span>] = enkey[((pszSource[i + <span class="number">1</span>] &amp; <span class="number">0xf</span>) &lt;&lt; <span class="number">2</span>) | ((<span class="number">0</span> &amp; <span class="number">0xc0</span>) &gt;&gt; <span class="number">6</span>)];</span><br><span class="line">pszEncode[n + <span class="number">3</span>] = <span class="string">&#x27;=&#x27;</span>;</span><br><span class="line">pszEncode[n + <span class="number">4</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> pszEncode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">Base64::encode</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* pszSource, <span class="keyword">int</span> nLen)</span> </span>&#123;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> nByteSrc = nLen;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i; i &lt; nByteSrc; i++)</span><br><span class="line"><span class="keyword">if</span> (pszSource[i] &lt; <span class="number">0</span> || pszSource[i] &gt; <span class="number">127</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;can not encode Non-ASCII characters&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">pszEncode</span><span class="params">(nByteSrc * <span class="number">4</span> / <span class="number">3</span> + <span class="number">4</span>, <span class="string">&#x27;\0&#x27;</span>)</span></span>;</span><br><span class="line"><span class="keyword">int</span> nLoop = nByteSrc % <span class="number">3</span> == <span class="number">0</span> ? nByteSrc : nByteSrc - <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nLoop; i += <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">pszEncode[n] = enkey[pszSource[i] &gt;&gt; <span class="number">2</span>];</span><br><span class="line">pszEncode[n + <span class="number">1</span>] = enkey[((pszSource[i] &amp; <span class="number">3</span>) &lt;&lt; <span class="number">4</span>) | ((pszSource[i + <span class="number">1</span>] &amp; <span class="number">0xF0</span>) &gt;&gt; <span class="number">4</span>)];</span><br><span class="line">pszEncode[n + <span class="number">2</span>] = enkey[((pszSource[i + <span class="number">1</span>] &amp; <span class="number">0x0f</span>) &lt;&lt; <span class="number">2</span>) | ((pszSource[i + <span class="number">2</span>] &amp; <span class="number">0xc0</span>) &gt;&gt; <span class="number">6</span>)];</span><br><span class="line">pszEncode[n + <span class="number">3</span>] = enkey[pszSource[i + <span class="number">2</span>] &amp; <span class="number">0x3F</span>];</span><br><span class="line">n += <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (nByteSrc % <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">pszEncode[n] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">pszEncode[n] = enkey[pszSource[i] &gt;&gt; <span class="number">2</span>];</span><br><span class="line">pszEncode[n + <span class="number">1</span>] = enkey[((pszSource[i] &amp; <span class="number">3</span>) &lt;&lt; <span class="number">4</span>) | ((<span class="number">0</span> &amp; <span class="number">0xf0</span>) &gt;&gt; <span class="number">4</span>)];</span><br><span class="line">pszEncode[n + <span class="number">2</span>] = <span class="string">&#x27;=&#x27;</span>;</span><br><span class="line">pszEncode[n + <span class="number">3</span>] = <span class="string">&#x27;=&#x27;</span>;</span><br><span class="line">pszEncode[n + <span class="number">4</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">pszEncode[n] = enkey[pszSource[i] &gt;&gt; <span class="number">2</span>];</span><br><span class="line">pszEncode[n + <span class="number">1</span>] = enkey[((pszSource[i] &amp; <span class="number">3</span>) &lt;&lt; <span class="number">4</span>) | ((pszSource[i + <span class="number">1</span>] &amp; <span class="number">0xf0</span>) &gt;&gt; <span class="number">4</span>)];</span><br><span class="line">pszEncode[n + <span class="number">2</span>] = enkey[((pszSource[i + <span class="number">1</span>] &amp; <span class="number">0xf</span>) &lt;&lt; <span class="number">2</span>) | ((<span class="number">0</span> &amp; <span class="number">0xc0</span>) &gt;&gt; <span class="number">6</span>)];</span><br><span class="line">pszEncode[n + <span class="number">3</span>] = <span class="string">&#x27;=&#x27;</span>;</span><br><span class="line">pszEncode[n + <span class="number">4</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> pszEncode;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* @brief 对 base64 编码后的字符串进行解码</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* @param strString 待解码的字符串</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* @return std::string 返回解码后的字符串</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* @note 对于非base64编码的字符串或已损坏的base64字符串进行解码会抛出 std::string 型异常, 请捕获</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">Base64::decode</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; strString)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> nByteSrc = strString.length();</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> pszSource = strString;</span><br><span class="line"><span class="keyword">if</span> (nByteSrc % <span class="number">4</span> != <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;bad base64 string&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">pszDecode</span><span class="params">(nByteSrc * <span class="number">3</span> / <span class="number">4</span> + <span class="number">4</span>, <span class="string">&#x27;\0&#x27;</span>)</span></span>;</span><br><span class="line"><span class="keyword">int</span> nLoop = pszSource[nByteSrc - <span class="number">1</span>] == <span class="string">&#x27;=&#x27;</span> ? nByteSrc - <span class="number">4</span> : nByteSrc;</span><br><span class="line"><span class="keyword">int</span> b[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nLoop; i += <span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line">b[<span class="number">0</span>] = dekey[pszSource[i]];        b[<span class="number">1</span>] = dekey[pszSource[i + <span class="number">1</span>]];</span><br><span class="line">b[<span class="number">2</span>] = dekey[pszSource[i + <span class="number">2</span>]];    b[<span class="number">3</span>] = dekey[pszSource[i + <span class="number">3</span>]];</span><br><span class="line"><span class="keyword">if</span> (b[<span class="number">0</span>] == <span class="number">-1</span> || b[<span class="number">1</span>] == <span class="number">-1</span> || b[<span class="number">2</span>] == <span class="number">-1</span> || b[<span class="number">3</span>] == <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;bad base64 string&quot;</span>;</span><br><span class="line"></span><br><span class="line">pszDecode[n] = (b[<span class="number">0</span>] &lt;&lt; <span class="number">2</span>) | ((b[<span class="number">1</span>] &amp; <span class="number">0x30</span>) &gt;&gt; <span class="number">4</span>);</span><br><span class="line">pszDecode[n + <span class="number">1</span>] = ((b[<span class="number">1</span>] &amp; <span class="number">0xf</span>) &lt;&lt; <span class="number">4</span>) | ((b[<span class="number">2</span>] &amp; <span class="number">0x3c</span>) &gt;&gt; <span class="number">2</span>);</span><br><span class="line">pszDecode[n + <span class="number">2</span>] = ((b[<span class="number">2</span>] &amp; <span class="number">0x3</span>) &lt;&lt; <span class="number">6</span>) | b[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">n += <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pszSource[nByteSrc - <span class="number">1</span>] == <span class="string">&#x27;=&#x27;</span> &amp;&amp; pszSource[nByteSrc - <span class="number">2</span>] == <span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">b[<span class="number">0</span>] = dekey[pszSource[i]];        b[<span class="number">1</span>] = dekey[pszSource[i + <span class="number">1</span>]];</span><br><span class="line"><span class="keyword">if</span> (b[<span class="number">0</span>] == <span class="number">-1</span> || b[<span class="number">1</span>] == <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;bad base64 string&quot;</span>;</span><br><span class="line"></span><br><span class="line">pszDecode[n] = (b[<span class="number">0</span>] &lt;&lt; <span class="number">2</span>) | ((b[<span class="number">1</span>] &amp; <span class="number">0x30</span>) &gt;&gt; <span class="number">4</span>);</span><br><span class="line">pszDecode[n + <span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pszSource[nByteSrc - <span class="number">1</span>] == <span class="string">&#x27;=&#x27;</span> &amp;&amp; pszSource[nByteSrc - <span class="number">2</span>] != <span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">b[<span class="number">0</span>] = dekey[pszSource[i]];        b[<span class="number">1</span>] = dekey[pszSource[i + <span class="number">1</span>]];</span><br><span class="line">b[<span class="number">2</span>] = dekey[pszSource[i + <span class="number">2</span>]];</span><br><span class="line"><span class="keyword">if</span> (b[<span class="number">0</span>] == <span class="number">-1</span> || b[<span class="number">1</span>] == <span class="number">-1</span> || b[<span class="number">2</span>] == <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;bad base64 string&quot;</span>;</span><br><span class="line"></span><br><span class="line">pszDecode[n] = (b[<span class="number">0</span>] &lt;&lt; <span class="number">2</span>) | ((b[<span class="number">1</span>] &amp; <span class="number">0x30</span>) &gt;&gt; <span class="number">4</span>);</span><br><span class="line">pszDecode[n + <span class="number">1</span>] = ((b[<span class="number">1</span>] &amp; <span class="number">0xf</span>) &lt;&lt; <span class="number">4</span>) | ((b[<span class="number">2</span>] &amp; <span class="number">0x3c</span>) &gt;&gt; <span class="number">2</span>);</span><br><span class="line">pszDecode[n + <span class="number">2</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pszSource[nByteSrc - <span class="number">1</span>] != <span class="string">&#x27;=&#x27;</span> &amp;&amp; pszSource[nByteSrc - <span class="number">2</span>] != <span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">pszDecode[n] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> pszDecode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">Base64::decode</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; strString, <span class="keyword">int</span>&amp; outLen)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> nByteSrc = strString.length();</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> pszSource = strString;</span><br><span class="line"><span class="keyword">if</span> (nByteSrc % <span class="number">4</span> != <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;bad base64 string&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span>* pszDecode = <span class="keyword">new</span> <span class="keyword">char</span>[nByteSrc * <span class="number">3</span> / <span class="number">4</span> + <span class="number">4</span>]&#123; <span class="string">&#x27;\0&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> nLoop = pszSource[nByteSrc - <span class="number">1</span>] == <span class="string">&#x27;=&#x27;</span> ? nByteSrc - <span class="number">4</span> : nByteSrc;</span><br><span class="line"><span class="keyword">int</span> b[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nLoop; i += <span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line">b[<span class="number">0</span>] = dekey[pszSource[i]];        b[<span class="number">1</span>] = dekey[pszSource[i + <span class="number">1</span>]];</span><br><span class="line">b[<span class="number">2</span>] = dekey[pszSource[i + <span class="number">2</span>]];    b[<span class="number">3</span>] = dekey[pszSource[i + <span class="number">3</span>]];</span><br><span class="line"><span class="keyword">if</span> (b[<span class="number">0</span>] == <span class="number">-1</span> || b[<span class="number">1</span>] == <span class="number">-1</span> || b[<span class="number">2</span>] == <span class="number">-1</span> || b[<span class="number">3</span>] == <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;bad base64 string&quot;</span>;</span><br><span class="line"></span><br><span class="line">pszDecode[n] = (b[<span class="number">0</span>] &lt;&lt; <span class="number">2</span>) | ((b[<span class="number">1</span>] &amp; <span class="number">0x30</span>) &gt;&gt; <span class="number">4</span>);</span><br><span class="line">pszDecode[n + <span class="number">1</span>] = ((b[<span class="number">1</span>] &amp; <span class="number">0xf</span>) &lt;&lt; <span class="number">4</span>) | ((b[<span class="number">2</span>] &amp; <span class="number">0x3c</span>) &gt;&gt; <span class="number">2</span>);</span><br><span class="line">pszDecode[n + <span class="number">2</span>] = ((b[<span class="number">2</span>] &amp; <span class="number">0x3</span>) &lt;&lt; <span class="number">6</span>) | b[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">n += <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pszSource[nByteSrc - <span class="number">1</span>] == <span class="string">&#x27;=&#x27;</span> &amp;&amp; pszSource[nByteSrc - <span class="number">2</span>] == <span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">b[<span class="number">0</span>] = dekey[pszSource[i]];        b[<span class="number">1</span>] = dekey[pszSource[i + <span class="number">1</span>]];</span><br><span class="line"><span class="keyword">if</span> (b[<span class="number">0</span>] == <span class="number">-1</span> || b[<span class="number">1</span>] == <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;bad base64 string&quot;</span>;</span><br><span class="line"></span><br><span class="line">pszDecode[n] = (b[<span class="number">0</span>] &lt;&lt; <span class="number">2</span>) | ((b[<span class="number">1</span>] &amp; <span class="number">0x30</span>) &gt;&gt; <span class="number">4</span>);</span><br><span class="line">pszDecode[n + <span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pszSource[nByteSrc - <span class="number">1</span>] == <span class="string">&#x27;=&#x27;</span> &amp;&amp; pszSource[nByteSrc - <span class="number">2</span>] != <span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">b[<span class="number">0</span>] = dekey[pszSource[i]];        b[<span class="number">1</span>] = dekey[pszSource[i + <span class="number">1</span>]];</span><br><span class="line">b[<span class="number">2</span>] = dekey[pszSource[i + <span class="number">2</span>]];</span><br><span class="line"><span class="keyword">if</span> (b[<span class="number">0</span>] == <span class="number">-1</span> || b[<span class="number">1</span>] == <span class="number">-1</span> || b[<span class="number">2</span>] == <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;bad base64 string&quot;</span>;</span><br><span class="line"></span><br><span class="line">pszDecode[n] = (b[<span class="number">0</span>] &lt;&lt; <span class="number">2</span>) | ((b[<span class="number">1</span>] &amp; <span class="number">0x30</span>) &gt;&gt; <span class="number">4</span>);</span><br><span class="line">pszDecode[n + <span class="number">1</span>] = ((b[<span class="number">1</span>] &amp; <span class="number">0xf</span>) &lt;&lt; <span class="number">4</span>) | ((b[<span class="number">2</span>] &amp; <span class="number">0x3c</span>) &gt;&gt; <span class="number">2</span>);</span><br><span class="line">pszDecode[n + <span class="number">2</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pszSource[nByteSrc - <span class="number">1</span>] != <span class="string">&#x27;=&#x27;</span> &amp;&amp; pszSource[nByteSrc - <span class="number">2</span>] != <span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">pszDecode[n] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">outLen = nByteSrc * <span class="number">3</span> / <span class="number">4</span> + <span class="number">4</span>;</span><br><span class="line"><span class="keyword">return</span> pszDecode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Socket调试工具-SocketToolV2.3</title>
      <link href="posts/65208.html"/>
      <url>posts/65208.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="软件截图"><a href="#软件截图" class="headerlink" title="软件截图"></a>软件截图</h2><p><img src= "https://hurrisonx.gitee.io/pic/common/loading.gif" data-lazy-src="https://hurrisonx.gitee.io/pic/2020/12.png" alt="图片无法显示"></p><h2 id="软件介绍"><a href="#软件介绍" class="headerlink" title="软件介绍"></a>软件介绍</h2><p>TCP/UDP Socket调试工具(SocketTool2)提供了TCP Server,TCP Client,UDP Server,UDP Client,UDP Group 五种Socket调试方案。可以在网络编程中提供便利</p><h2 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h2><a class="btn-beautify button--animated purple larger" href="https://www.lanzous.com/i8w9gni"   title="蓝奏云下载"><i class="fas fa-cloud-download-alt fa-fw"></i><span>蓝奏云下载</span></a> 下载密码:wp]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Socket </tag>
            
            <tag> 调试 </tag>
            
            <tag> 通信 </tag>
            
            <tag> Tcp </tag>
            
            <tag> Udp </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
